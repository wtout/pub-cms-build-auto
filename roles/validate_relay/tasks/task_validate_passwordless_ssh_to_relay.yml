---
# Tasks to validate passwordless SSH to relay
- block:
  - name: delete root's id_rsa
    ansible.builtin.file:
      path: '/root/.ssh/id_rsa'
      state: absent
    register: reg_delete
  - name: run the sshKeyGen.sh script
    ansible.builtin.shell: |
      /root/bin/sshKeyGen.sh
    register: reg_keygen
  - name: setting passwordless SSH to relay up
    block:
      - name: set up passwordless SSH to relay
        ansible.builtin.shell: |
          /root/bin/configSSH.sh root {{ hostvars[rly_item]['vm']['name'] }} {{ ansible_ssh_pass }} /root
        register: reg_setup_ssh
        loop: "{{ groups['rly'][1:] if 'dr' not in group_names else groups['drrly'] }}"
        loop_control:
          loop_var: rly_item
        no_log: yes
      - ansible.builtin.assert:
          that: reg_setup_ssh.results|select('search','Permission denied')|list == []
        register: reg_setup_ssh_status
      - name: Verify passwordless SSH to relay
        ansible.builtin.shell: |
          ssh {{ hostvars[rly_item]['vm']['name'] }} exit
        register: reg_check_ssh
        loop: "{{ groups['rly'][1:] if 'dr' not in group_names else groups['drrly'] }}"
        loop_control:
          loop_var: rly_item
    rescue:
      - name: define vr_passwordless_ssh_rly_status
        ansible.builtin.set_fact:
          vr_passwordless_ssh_rly_status: "{{ vr_passwordless_ssh_rly_status|default([]) | union((['Passwordless SSH to ' + hostvars[rly_item]['vm']['name'] + ' cannot be set up'] + reg_setup_ssh.results|selectattr('rly_item','equalto',rly_item)|map(attribute='stdout')|list if reg_setup_ssh.results|selectattr('rly_item','equalto',rly_item)|map(attribute='stdout')|list|first is search('Permission denied') else []) if reg_setup_ssh_status is failed else (['Passwordless SSH to ' + hostvars[rly_item]['vm']['name'] + ' cannot be set up'] + reg_check_ssh.results|selectattr('rly_item','equalto',rly_item)|map(attribute='stderr')|list if reg_check_ssh.results|selectattr('rly_item','equalto',rly_item)|map(attribute='failed')|list|first == true else []) if reg_check_ssh is failed else []) }}"
        loop: "{{ groups['rly'][1:] if 'dr' not in group_names else groups['drrly'] }}"
        loop_control:
          loop_var: rly_item
  - ansible.builtin.assert:
      that: vr_passwordless_ssh_rly_status|default([]) == []
      fail_msg: "{{ vr_passwordless_ssh_rly_status|default([]) }}"
  when: "inventory_hostname is search('rly')"
