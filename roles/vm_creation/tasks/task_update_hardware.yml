---
# tasks to update VM's hardware settings
- block:
  - name: Power-off VM
    community.vmware.vmware_guest:
      hostname: "{{ hostvars[groups[('dr' if 'dr' in group_names else '') + 'vcenter'][0]]['information']['address'] }}"
      username: "{{ hostvars[groups[('dr' if 'dr' in group_names else '') + 'vcenter'][0]]['credentials']['username'] }}"
      password: "{{ hostvars[groups[('dr' if 'dr' in group_names else '') + 'vcenter'][0]]['credentials']['password'] }}"
      datacenter: "{{ hostvars[groups[('dr' if 'dr' in group_names else '') + 'vcenter'][0]]['information']['datacenter'] }}"
      cluster: "{{ hostvars[groups[('dr' if 'dr' in group_names else '') + 'vcenter'][0]]['information']['cluster'] }}"
      name: "{{ vm.name }}"
      state: poweredoff
      validate_certs: no
  - name: define nics_list
    ansible.builtin.set_fact:
      nics_list:
        - name: "{{ netconfig.network1 }}"
          ip: "{{ netconfig.ipaddress1 }}"
          netmask: "{{ netconfig.netmask1 }}"
          gateway: "{{ netconfig.gateway1 }}"
          device_type: vmxnet3
          start_connected: true
          allow_guest_control: true
    when:
      - ova_nets.stdout_lines|length == 1
      - inventory_hostname is not regex('rly|lnxjmp')
  - name: define nics_list
    ansible.builtin.set_fact:
      nics_list:
        - name: "{{ netconfig.network1 }}"
          ip: "{{ netconfig.ipaddress1 }}"
          netmask: "{{ netconfig.netmask1 }}"
          gateway: "{{ netconfig.gateway1 }}"
          device_type: vmxnet3
          start_connected: true
          allow_guest_control: true
        - name: "{{ netconfig.network2 }}"
          ip: "{{ netconfig.ipaddress2 }}"
          netmask: "{{ netconfig.netmask2 }}"
          gateway: "{{ netconfig.gateway2 }}"
          device_type: vmxnet3
          start_connected: true
          allow_guest_control: true
    when:
      - ova_nets.stdout_lines|length == 2 or inventory_hostname is regex('rly|lnxjmp')

  - name: Update VM hardware settings
    community.vmware.vmware_guest:
      hostname: "{{ hostvars[groups[('dr' if 'dr' in group_names else '') + 'vcenter'][0]]['information']['address'] }}"
      username: "{{ hostvars[groups[('dr' if 'dr' in group_names else '') + 'vcenter'][0]]['credentials']['username'] }}"
      password: "{{ hostvars[groups[('dr' if 'dr' in group_names else '') + 'vcenter'][0]]['credentials']['password'] }}"
      datacenter: "{{ hostvars[groups[('dr' if 'dr' in group_names else '') + 'vcenter'][0]]['information']['datacenter'] }}"
      cluster: "{{ hostvars[groups[('dr' if 'dr' in group_names else '') + 'vcenter'][0]]['information']['cluster'] }}"
      name: "{{ vm.name }}"
      hardware:
        memory_mb: "{{ vm.memory|int * 1024 }}"
        num_cpus: "{{ vm.cpu|int }}"
      networks: "{{ nics_list }}"
      customization:
        existing_vm: true
        hostname: "{{ vm.name }}"
        dns_servers: "{{ sysconfig.secondary.dns_servers if 'dr' in group_names else sysconfig.primary.dns_servers }}"
        domain: "{{ sysconfig.secondary.domain_name if 'dr' in group_names else sysconfig.primary.domain_name }}"
      validate_certs: no
      wait_for_customization: true
    register: vmguest_net
    ignore_errors: true
    throttle: "{{ 5 if hostvars[groups[('dr' if 'dr' in group_names else '') + 'vcenter'][0]]['information']['deptype'] == 'h' else 0 }}"
  - fail:
      msg: "{{ vmguest_net.msg }}"
    when:
      - vmguest_net is failed
  delegate_to: "{{ groups['bastion'][0] if (groups['bastion'] | length >= 1 and bastion.address != [] and bastion.address != ['']) else 'localhost' }}"
  tags: vm_creation
