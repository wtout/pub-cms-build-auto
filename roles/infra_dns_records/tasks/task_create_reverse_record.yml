---
# Task file to create reverse DNS record
- name: Create reverse DNS record
  delegate_to: "{{ groups['bastion'][0] if (groups['bastion'] | length >= 1 and bastion.address != [] and bastion.address != ['']) else 'localhost' }}"
  block:
    - name: Add {{ mydesignation + ' reverse DNS record' }}
      ansible.builtin.shell: |
        {% if myserver is search('172.(23|30)') %}
        sshpass -p {{ svc_password }} ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -T -l {{ svc_username }} {{ lookup('env', 'MYIP') }} <<EOF
        {% endif %}
        nsupdate {% if myserver is search('172.(23|30)') %}-g {% endif %}<<EOC
        server {{ myserver }}
        zone {{ myipaddress.split('.')[:-1] | reverse | join('.') + '.in-addr.arpa' }}
        update add {{ myipaddress.split('.') | reverse | join('.') + '.in-addr.arpa' }} 86400 PTR {{ myrecord }}.{{ mydomain }}
        send
        EOC
        {% if myserver is search('172.(23|30)') %}
        EOF
        {% endif %}
      register: reg_rdr
      changed_when: reg_rdr.rc == 0
      failed_when: reg_rdr.rc != 0 and reg_rdr.stderr is not search('tsig verify failure')
      until: reg_rdr is succeeded
      delay: 10
      no_log: true
  rescue:
    - name: Debug message
      ansible.builtin.debug:
        msg: "{{ reg_rdr | replace(svc_password, 'obfuscated') if svc_password != '' else reg_rdr }}"
  always:
    - name: Assert creating of the forward DNS record is successful
      ansible.builtin.assert:
        that: reg_rdr is succeeded
      when: myserver is search('172.(23|30)')
