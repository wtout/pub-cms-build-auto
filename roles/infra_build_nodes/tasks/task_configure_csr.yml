---
# Task file to configure CSRs
- block:
  - block:
    - name: define csr NICs
      ansible.builtin.set_fact:
        nic1:
          - name: "{{ netconfig.network1 }}"
            ip: "{{ netconfig.ipaddress1 }}"
            netmask: "{{ netconfig.netmask1 }}"
            gateway: "{{ netconfig.gateway1 }}"
            device_type: vmxnet3
        nic2:
          - name: "{{ netconfig.network2 }}"
            ip: "{{ netconfig.ipaddress2 }}"
            netmask: "{{ netconfig.netmask2 }}"
            gateway: "{{ netconfig.gateway2 }}"
            device_type: vmxnet3
        nic3:
          - name: "{{ netconfig.network3 }}"
            ip: "{{ netconfig.ipaddress3 }}"
            netmask: "{{ netconfig.netmask3 }}"
            gateway: "{{ netconfig.gateway3 }}"
            device_type: vmxnet3
        nic4:
          - name: "{{ netconfig.network4 }}"
            ip: "{{ netconfig.ipaddress4 }}"
            netmask: "{{ netconfig.netmask4 }}"
            gateway: "{{ netconfig.gateway4 }}"
            device_type: vmxnet3
    - name: define csr NIC5
      ansible.builtin.set_fact:
        nic5:
          - name: "{{ netconfig.network5 }}"
            ip: "{{ netconfig.ipaddress5 }}"
            netmask: "{{ netconfig.netmask5 }}"
            gateway: "{{ netconfig.gateway5 }}"
            device_type: vmxnet3
    - name: Update VM hardware settings with correct NICs
      vmware_guest:
        hostname: "{{ hostvars[groups[('dr' if 'dr' in group_names else '') + 'vcenter'][0]]['information']['address'] }}"
        username: "{{ hostvars[groups[('dr' if 'dr' in group_names else '') + 'vcenter'][0]]['credentials']['username'] }}"
        password: "{{ hostvars[groups[('dr' if 'dr' in group_names else '') + 'vcenter'][0]]['credentials']['password'] }}"
        name: "{{ vm.name }}"
        datacenter: "{{ hostvars[groups[('dr' if 'dr' in group_names else '') + 'vcenter'][0]]['information']['datacenter'] }}"
        cluster: "{{ hostvars[groups[('dr' if 'dr' in group_names else '') + 'vcenter'][0]]['information']['cluster'] }}"
        hardware:
          memory_mb: "{{ vm.memory | int * 1024 }}"
          num_cpus: "{{ vm.cpu | int }}"
        networks: "{{ nic1 + nic2 + nic3 + nic4 + nic5|default([]) }}"
        validate_certs: no
        
    - name: Power on VM
      vmware_guest_powerstate:
        hostname: "{{ hostvars[groups[('dr' if 'dr' in group_names else '') + 'vcenter'][0]]['information']['address'] }}"
        username: "{{ hostvars[groups[('dr' if 'dr' in group_names else '') + 'vcenter'][0]]['credentials']['username'] }}"
        password: "{{ hostvars[groups[('dr' if 'dr' in group_names else '') + 'vcenter'][0]]['credentials']['password'] }}"
        name: "{{ vm.name }}"
        state: powered-on
        validate_certs: no

    - name: Gather VM info
      vmware_guest_info:
        hostname: "{{ hostvars[groups[('dr' if 'dr' in group_names else '') + 'vcenter'][0]]['information']['address'] }}"
        username: "{{ hostvars[groups[('dr' if 'dr' in group_names else '') + 'vcenter'][0]]['credentials']['username'] }}"
        password: "{{ hostvars[groups[('dr' if 'dr' in group_names else '') + 'vcenter'][0]]['credentials']['password'] }}"
        name: "{{ vm.name }}"
        datacenter: "{{ hostvars[groups[('dr' if 'dr' in group_names else '') + 'vcenter'][0]]['information']['datacenter'] }}"
        validate_certs: no
      register: csr_info
      until: csr_info.instance.ipv4 != None
      retries: 20
      delay: 30
    - set_fact:
        ansible_host: "{{ csr_info.instance.ipv4 }}"
        dhcp_address: "{{ csr_info.instance.ipv4 }}"
    delegate_to: "{{ groups['bastion'][0] if (groups['bastion'] | length >= 1 and bastion.address != [] and bastion.address != ['']) else 'localhost' }}" 

  - block:
    - name: Apply Primary CSR configuration
      ios_config:
        lines: "{{ interface_item.properties }}"
        parents: "{{ interface_item.name }}"
      loop: "{{ interfaces }}"
      loop_control:
        loop_var: interface_item

    - name: Set NTP server
      ios_ntp:
        server: "{{ ntp_server }}"
        source_int: "{{ ntp_source }}"
        state: present

    - name: Save Primary CSR configuration
      ios_command:
        commands:
          - command: Copy running-config startup-config
            prompt: '[confirm]'
            answer: "\r"
    when: inventory_hostname is search('csr01')

  - block:
    - name: Apply Secondary CSR configuration
      ios_config:
        lines: "{{ interface_item.properties }}"
        parents: "{{ interface_item.name }}"
      loop: "{{ interfaces }}"
      loop_control:
        loop_var: interface_item

    - name: Save Secondary CSR configuration
      ios_command:
        commands:
          - command: Copy running-config startup-config
            prompt: '[confirm]'
            answer: "\r"
    when: inventory_hostname is search('csr02')

  - name: Define CSR serial number
    block:
    - ios_facts:
        gather_subset: min
  tags: [ 'infra_build_nodes', 'infra_configure', 'never' ]
  