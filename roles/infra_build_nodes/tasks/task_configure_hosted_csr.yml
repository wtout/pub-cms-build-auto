---
# Task file to configure CSR NICs
- name: Configure hosted CSR NICs
  delegate_to: "{{ groups['bastion'][0] if (groups['bastion'] | length >= 1 and bastion.address != [] and bastion.address != ['']) else 'localhost' }}"
  block:
    - name: Check VM reachable
      ansible.builtin.command: ping {{ netconfig.nic4.ipaddress }} -c 1
      register: ibn_vm_reachable
      changed_when: false
      check_mode: false
      become: "{{ true if host_os | lower is search('almalinux|ubuntu') else false }}"
      ignore_errors: true
    - name: Update hardware settings with correct NICs
      when: ibn_vm_reachable is failed
      block:
        - name: Power off VM
          ansible.builtin.include_tasks: task_poweroff_csr.yml
        - name: Define csr NICs
          ansible.builtin.set_fact:
            nic1:
              - name: "{{ netconfig.nic1.network }}"
                ip: "{{ netconfig.nic1.ipaddress }}"
                netmask: "{{ netconfig.nic1.netmask }}"
                gateway: "{{ netconfig.nic1.gateway }}"
                device_type: vmxnet3
            nic2:
              - name: "{{ netconfig.nic2.network }}"
                ip: "{{ netconfig.nic2.ipaddress }}"
                netmask: "{{ netconfig.nic2.netmask }}"
                gateway: "{{ netconfig.nic2.gateway }}"
                device_type: vmxnet3
            nic3:
              - name: "{{ netconfig.nic3.network }}"
                ip: "{{ netconfig.nic3.ipaddress }}"
                netmask: "{{ netconfig.nic3.netmask }}"
                gateway: "{{ netconfig.nic3.gateway }}"
                device_type: vmxnet3
            nic4:
              - name: "{{ netconfig.nic4.network }}"
                ip: "{{ netconfig.nic4.ipaddress }}"
                netmask: "{{ netconfig.nic4.netmask }}"
                gateway: "{{ netconfig.nic4.gateway }}"
                device_type: vmxnet3
        - name: Update VM hardware settings with correct NICs
          community.vmware.vmware_guest:
            hostname: "{{ hostvars[groups[('dr' if 'dr' in group_names else '') + 'vcenter'][0]]['information']['address'] }}"
            username: "{{ hostvars[groups[('dr' if 'dr' in group_names else '') + 'vcenter'][0]]['credentials']['username'] }}"
            password: "{{ hostvars[groups[('dr' if 'dr' in group_names else '') + 'vcenter'][0]]['credentials']['password'] }}"
            name: "{{ vm.name }}"
            datacenter: "{{ hostvars[groups[('dr' if 'dr' in group_names else '') + 'vcenter'][0]]['information']['datacenter'] }}"
            cluster: "{{ hostvars[groups[('dr' if 'dr' in group_names else '') + 'vcenter'][0]]['information']['cluster'] }}"
            hardware:
              memory_mb: "{{ vm.memory | int * 1024 }}"
              num_cpus: "{{ vm.cpu | int }}"
            networks: "{{ nic1 + nic2 + nic3 + nic4 }}" # noqa: args[module]
            validate_certs: false
        - name: Power on VM
          ansible.builtin.include_tasks: task_poweron_csr.yml
        - name: Check VM reachable
          ansible.builtin.command: ping {{ netconfig.nic4.ipaddress }} -c 1
          register: ibn_vm_reachable2
          changed_when: false
          check_mode: false
          become: "{{ true if host_os | lower is search('almalinux|ubuntu') else false }}"
          until: ibn_vm_reachable2 is succeeded
          retries: 20
          delay: 30
- name: Define ansible_host as Interface1 IP address
  ansible.builtin.set_fact:
    ansible_host: "{{ netconfig.nic4.ipaddress }}"
- name: Save CSR configuration
  cisco.ios.ios_command:
    commands:
      - command: Copy running-config startup-config
        prompt: '[confirm]'
        answer: "\r"
  register: reg_save_config
  until: reg_save_config is succeeded
  retries: 15
  delay: 9
