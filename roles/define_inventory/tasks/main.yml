---
# tasks file for define_inventory
- block:
  - name: read customer definition
    include_vars:
      file: "{{ SYS_NAME }}"
      name: 'environment_definition'

  - debug: var=environment_definition

  - name: check if required variables are defined
    set_fact:
      cn: "{{ 'Customer name is not defined' if environment_definition.customer.name == none else '' }}"
      dm: "{{ 'Deployment model is not defined' if environment_definition.customer.deployment_model == none else '' }}"
      np: "{{ 'Primary number of Portals is not defined' if environment_definition.customer.primary.number_of_prts == none else '' }}"
      nm: "{{ 'Primary number of Message Collectors is not defined' if environment_definition.customer.primary.number_of_mcs == none else '' }}"
      nd: "{{ 'Primary number of Data Collectors is not defined' if environment_definition.customer.primary.number_of_dcs == none else '' }}"
      dr: "{{ 'Disaster recovery is not defined' if environment_definition.customer.disaster_recovery == none else '' }}"
      pn: "{{ 'Primary name_prefix is not defined' if environment_definition.customer.primary.name_prefix == none else '' }}"
      po: "{{ 'Primary octets is not defined' if environment_definition.customer.primary.octets == none else '' }}"
      sn: "{{ 'Secondary name_prefix is not defined' if (environment_definition.customer.disaster_recovery and environment_definition.customer.secondary.name_prefix == none) else '' }}"
      so: "{{ 'Secondary octets is not defined' if (environment_definition.customer.disaster_recovery and environment_definition.customer.secondary.octets == none) else '' }}"
      rv: "{{ 'Release version is not defined' if environment_definition.customer.release_version == none else '' }}"
      dn: "{{ 'Datacenter name is not defined' if environment_definition.datacenter.name == none else '' }}"
      dh: "{{ 'Datacenter resources is not defined' if (environment_definition.customer.deployment_model != none and environment_definition.customer.deployment_model is search('a') and environment_definition.customer.deployment_model is not search('h') and environment_definition.datacenter.resources == none) else '' }}"
      dc: "{{ 'Datacenter cluster is not defined. Will use esxi hosts IPs to define the cluster name' if (environment_definition.customer.deployment_model != none and environment_definition.customer.deployment_model is search('a') and environment_definition.customer.deployment_model is not search('h')) else '' }}"
      ps: "{{ 'Puppet server_name is not defined' if (environment_definition.puppet is not defined or environment_definition.puppet.server_name is not defined or environment_definition.puppet.server_name == none) else '' }}"
      ys: "{{ 'Yum server_name is not defined' if (environment_definition.yum is not defined or environment_definition.yum.server_name is not defined or environment_definition.yum.server_name == none) else '' }}"

  - debug:
      msg: "{{ dc }}"
    when: dc != ''

  - name: verify that all variables are defined
    assert:
      that:
        - vars[item] == ''
      fail_msg: "{{ vars[item] }}"
    loop: [ cn, dm, dr, np, nm, nd, pn, po, sn, so, rv, dn, dh, ps, ys ]

  - name: check if deployment model value is valid
    assert:
      that:
        - not environment_definition.customer.deployment_model | lower | regex_search('a|aioa|aioh|h') == none
      fail_msg: "deployment_model is not valid. Only a, h, aioa and aioh are valid"

  - name: check if number of EM7 Portals, MCs and DCs value is valid
    assert:
      that:
        - "environment_definition.customer.primary.number_of_{{ loop_item.name }} | int >= 2"
        - "environment_definition.customer.primary.number_of_{{ loop_item.name }} | int <= loop_item.max_value"
        - "environment_definition.customer.primary.number_of_{{ loop_item.name }} | int % 2 == 0"
      fail_msg: "environment_definition.customer.primary.number_of_{{ loop_item.name }} is not valid. Only even numbers in [2-{{ loop_item.max_value }}] are valid"
    loop:
      - { 'name': 'prts', 'max_value': 4 }
      - { 'name': 'mcs', 'max_value': 6 }
      - { 'name': 'dcs', 'max_value': 12 }
    loop_control:
      loop_var: loop_item
    when: environment_definition.customer.deployment_model | lower is not search('aio')

  - name: check if number of EM7 Portals, MCs and DCs value is valid
    assert:
      that:
        - "environment_definition.customer.primary.number_of_{{ loop_item.name }} | int == 0"
      fail_msg: "environment_definition.customer.primary.number_of_{{ loop_item.name }} is not valid. Only 0 is valid"
    loop:
      - { 'name': 'prts' }
      - { 'name': 'mcs' }
      - { 'name': 'dcs' }
    loop_control:
      loop_var: loop_item
    when: environment_definition.customer.deployment_model | lower is search('aio')

  - name: check if disaster recovery value is valid
    assert:
      that:
        - not environment_definition.customer.disaster_recovery | lower | regex_search('yes|no|true|false') == none
      fail_msg: "disaster_recovery is not valid. Only yes/no/true/false are valid"

  - name: check if primary octets value is valid
    assert:
      that:
        - not environment_definition.customer.primary.octets | regex_search('^\d{1,3}\.\d{1,3}\.\d{1,3}$') == none
      fail_msg: "primary octets is not valid. Only three octets (xxx.xxx.xxx) format is valid"

  - name: check if secondary octets value is valid
    assert:
      that:
        - not environment_definition.customer.secondary.octets | regex_search('^\d{1,3}\.\d{1,3}\.\d{1,3}$') == none
      fail_msg: "secondary octets is not valid. Only three octets (xxx.xxx.xxx) format is valid"
    when: environment_definition.customer.disaster_recovery

  - name: check if release version value is valid
    assert:
      that:
        - not environment_definition.customer.release_version | upper | regex_search('R\d+') == none
      fail_msg: "release_version is not valid. Only R followed by version number (Ex. R9.1.3) format is valid"

  - name: check if puppet server name value is valid
    assert:
      that:
        - not environment_definition.puppet.server_name | lower | regex_search('alln1qspupp0[1-4]') == none
      fail_msg: "Puppet server_name is not valid. Only alln1qspupp01 through 04 are valid"

  - name: check if yum server name value is valid
    assert:
      that:
        - not environment_definition.yum.server_name | lower | regex_search('alln1qsyumrpp0[1-2]') == none
      fail_msg: "Yum server_name is not valid. Only alln1qsyumrpp01 through 02 are valid"

  - name: verify if selected datacenter supports deployment model
    assert:
      that:
        - "datacenters[environment_definition.datacenter.name]['deptype'] is search(environment_definition.customer.deployment_model[-1:])"
      fail_msg: "The datacenter selected, {{ environment_definition.datacenter.name }}, only supports the {{ 'on-prem' if datacenters[environment_definition.datacenter.name]['deptype'] is search('a') else 'hosted' }} deployment model. Aborting!"

  - name: verify if selected deployment model supports disaster recovery
    assert:
      that:
        - "environment_definition.customer.deployment_model == 'a'"
      fail_msg: "The disaster recovery is only supported with the non-AIO on-prem or ucm deployment model. Aborting!"
    when: environment_definition.customer.disaster_recovery

  - block:
    - name: verify if resources are separated
      assert:
        that:
          - environment_definition.datacenter.resources | regex_search('\d{1,3}[,|;|\s]\s?\d{1,3}')
        fail_msg: "The resources list {{ environment_definition.datacenter.resources }} is not a valid IP address list. Aborting!"
      when:
        - environment_definition.datacenter.resources | regex_search('^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}.*\d{1,3}\.')
    - name: define the resources list separator
      set_fact:
        separator: "{{ ', ' if environment_definition.datacenter.resources is search(', ') else ',' if environment_definition.datacenter.resources is search(',') else '; ' if environment_definition.datacenter.resources is search('; ') else ';' if environment_definition.datacenter.resources is search(';') else ' ' }}"
    - name: verify that resources are valid
      assert:
        that:
          - ip_item | ipaddr
        fail_msg: "The resources list {{ environment_definition.datacenter.resources }} is not a valid IP address list. Aborting!"
      loop: "{{ environment_definition.datacenter.resources.split(separator) }}"
      loop_control:
        loop_var: ip_item
    - name: verify that there are enough resources
      assert:
        that:
          - environment_definition.datacenter.resources.split(separator) | length == required_number_resources|int
        fail_msg: "The resources list contains {{ environment_definition.datacenter.resources.split(separator) | length }} hosts. Required number of resources is {{ required_number_resources }}. Aborting!"
      vars:
        required_number_resources: "{{ 1 if environment_definition.customer.deployment_model | lower is search('aio') else 3 if environment_definition.customer.disaster_recovery else 2 }}"
    - name: reformat resources list
      set_fact:
        resources: "{{ resources|default([]) + [ip_item] }}"
      loop: "{{ environment_definition.datacenter.resources.split(separator) }}"
      loop_control:
        loop_var: ip_item
    when:
      - environment_definition.customer.deployment_model is search('a') and environment_definition.customer.deployment_model is not search('h')

  - block:
    - name: verify if resources are provided
      assert:
        that:
          - environment_definition.datacenter.resources == none
        fail_msg: "The resources list {{ environment_definition.datacenter.resources }} is not valid for a hosted deployment. Aborting!"
    when:
      - environment_definition.customer.deployment_model is search('h')

  - name: check if localhost's IP address is private
    shell: ip a show $(ip link | grep '2:' | head -1 | awk '{print $2}') | grep 'inet ' | cut -d '/' -f1 | awk '{print $2}' | grep '192\.168\.' || echo 'Not local'
    register: localhost_ip
  
  - name: define template variables
    set_fact:
      use_bastion: "{{ true if localhost_ip is search('192.168.') else false }}"
      number_of_prts: "{{ environment_definition.customer.primary.number_of_prts }}"
      number_of_mcs: "{{ environment_definition.customer.primary.number_of_mcs }}"
      number_of_dcs: "{{ environment_definition.customer.primary.number_of_dcs }}"

  - name: generate customer inventory
    copy:
      src: "files/inventory{{ environment_definition.customer.deployment_model }}/"
      dest: "{{ auto_dir + '/inventories/' + SYS_NAME|basename|splitext|first|lower }}"

  - name: add disaster recovery to customer inventory
    copy:
      src: "files/drinventory{{ environment_definition.customer.deployment_model }}/"
      dest: "{{ auto_dir + '/inventories/' + SYS_NAME|basename|splitext|first|lower }}"
    when: environment_definition.customer.disaster_recovery

  - name: customize inventory
    template:
      src: "{{ tmpl_item.name }}"
      dest: "{{ tmpl_item.dest }}"
    loop:
      - { name: 'templates/all.j2', dest: "{{ auto_dir + '/inventories/' + SYS_NAME|basename|splitext|first|lower + '/group_vars/all.yml' }}" }
      - { name: 'templates/hosts.j2', dest: "{{ auto_dir + '/inventories/' + SYS_NAME|basename|splitext|first|lower + '/hosts.yml' }}" }
    loop_control:
      loop_var: tmpl_item

  check_mode: no
  tags: [ 'always', 'define_inventory' ]
