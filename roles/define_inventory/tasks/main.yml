---
# tasks file for define_inventory
- block:
  - name: read customer definition
    include_vars:
      file: "{{ SYS_NAME }}"
      name: 'environment_definition'

  - debug: var=environment_definition

  - name: check if required variables are defined
    set_fact:
      cn: "{{ 'Customer name is not defined' if (environment_definition.customer.name is not defined or environment_definition.customer.name == none) else '' }}"
      dm: "{{ 'Deployment model is not defined' if (environment_definition.customer.deployment_model is not defined or environment_definition.customer.deployment_model == none) else '' }}"
      ar: "{{ 'ATA relay is not defined' if (environment_definition.customer.ata is not defined or environment_definition.customer.ata == none) else '' }}"
      dr: "{{ 'Disaster recovery is not defined' if (environment_definition.customer.disaster_recovery is not defined or environment_definition.customer.disaster_recovery == none) else '' }}"
      np: "{{ 'Primary number of Portals is not defined' if (environment_definition.customer.primary.number_of_prts is not defined or environment_definition.customer.primary.number_of_prts == none) else '' }}"
      nm: "{{ 'Primary number of Message Collectors is not defined' if (environment_definition.customer.primary.number_of_mcs is not defined or environment_definition.customer.primary.number_of_mcs == none) else '' }}"
      nd: "{{ 'Primary number of Data Collectors is not defined' if (environment_definition.customer.primary.number_of_dcs is not defined or environment_definition.customer.primary.number_of_dcs == none) else '' }}"
      pn: "{{ 'Primary name_prefix is not defined' if (environment_definition.customer.primary.name_prefix is not defined or  environment_definition.customer.primary.name_prefix == none) else '' }}"
      po: "{{ 'Primary octets is not defined' if (environment_definition.customer.primary.octets is not defined or environment_definition.customer.primary.octets == none) else '' }}"
      sn: "{{ 'Secondary name_prefix is not defined' if (environment_definition.customer.disaster_recovery and (environment_definition.customer.secondary.name_prefix is not defined or environment_definition.customer.secondary.name_prefix == none)) else '' }}"
      so: "{{ 'Secondary octets is not defined' if (environment_definition.customer.disaster_recovery and (environment_definition.customer.secondary.octets is not defined or environment_definition.customer.secondary.octets == none)) else '' }}"
      rv: "{{ 'Release version is not defined' if (environment_definition.customer.version.release is not defined or environment_definition.customer.version.release == none) else '' }}"
      pdn: "{{ 'Datacenter name is not defined' if (environment_definition.datacenter.primary.name is not defined or environment_definition.datacenter.primary.name == none) else '' }}"
      pdh: "{{ 'Primary Datacenter resources is not defined' if (environment_definition.customer.deployment_model != none and environment_definition.customer.deployment_model is search('a') and environment_definition.customer.deployment_model is not search('h') and (environment_definition.datacenter.primary.resources is not defined or environment_definition.datacenter.primary.resources == none)) else '' }}"
      pdc: "{{ 'Primary Datacenter cluster is not defined. Will use esxi hosts IPs to define the primary cluster name' if (environment_definition.datacenter.primary.cluster == none and environment_definition.customer.deployment_model != none and environment_definition.customer.deployment_model is search('a') and environment_definition.customer.deployment_model is not search('h')) else '' }}"
      sdn: "{{ 'Secondary Datacenter name is not defined' if environment_definition.customer.disaster_recovery and (environment_definition.datacenter.secondary.name is not defined or environment_definition.datacenter.secondary.name == none) else '' }}"
      sdh: "{{ 'Secondary Datacenter resources is not defined' if (environment_definition.customer.disaster_recovery and environment_definition.customer.deployment_model != none and environment_definition.customer.deployment_model is search('a') and environment_definition.customer.deployment_model is not search('h') and (environment_definition.datacenter.secondary.resources is not defined or environment_definition.datacenter.secondary.resources == none)) else '' }}"
      sdc: "{{ 'Secondary Datacenter cluster is not defined. Will use esxi hosts IPs to define the secondary cluster name' if (environment_definition.customer.disaster_recovery and environment_definition.datacenter.secondary.cluster == none and environment_definition.customer.deployment_model != none and environment_definition.customer.deployment_model is search('a') and environment_definition.customer.deployment_model is not search('h')) else '' }}"
      pps: "{{ 'Primary Puppet server_name is not defined' if (environment_definition.puppet is not defined or environment_definition.puppet.primary.server_name is not defined or environment_definition.puppet.primary.server_name == none) else '' }}"
      pys: "{{ 'Primary Yum server_name is not defined' if (environment_definition.yum is not defined or environment_definition.yum.primary.server_name is not defined or environment_definition.yum.primary.server_name == none) else '' }}"
      sps: "{{ 'Secondary Puppet server_name is not defined' if environment_definition.customer.disaster_recovery and (environment_definition.puppet is not defined or environment_definition.puppet.secondary.server_name is not defined or environment_definition.puppet.secondary.server_name == none) else '' }}"
      sys: "{{ 'Secondary Yum server_name is not defined' if environment_definition.customer.disaster_recovery and (environment_definition.yum is not defined or environment_definition.yum.secondary.server_name is not defined or environment_definition.yum.secondary.server_name == none) else '' }}"

  - debug:
      msg: "{{ pdc }}"
    when: pdc != ''

  - debug:
      msg: "{{ sdc }}"
    when: sdc != ''

  - name: verify that all variables are defined
    assert:
      that:
        - vars[item] == ''
      fail_msg: "{{ vars[item] }}"
    loop: [ cn, dm, ar, dr, np, nm, nd, pn, po, sn, so, rv, pdn, pdh, sdn, sdh, pps, pys, sps, sys ]

  - name: check if deployment model value is valid
    assert:
      that:
        - not environment_definition.customer.deployment_model | lower | regex_search('a|aioa|aioh|h') == none
      fail_msg: "deployment_model is not valid. Only a, h, aioa and aioh are valid"

  - debug:
      msg:
        - "environment_definition.customer.primary.number_of_{{ loop_item.name }}"
        - "{{ environment_definition['customer']['primary']['number_of_' + loop_item.name] }}"
    loop:
      - { 'name': 'prts', 'max_value': 4 }
      - { 'name': 'mcs', 'max_value': 6 }
      - { 'name': 'dcs', 'max_value': 12 }
    loop_control:
      loop_var: loop_item

  - name: check if number of EM7 Portals, MCs and DCs value is valid
    assert:
      that:
        - "environment_definition.customer.primary.number_of_{{ loop_item.name }} | int >= {{ 2 if environment_definition.customer.deployment_model | lower is not search('aio') else 0 }}"
        - "environment_definition.customer.primary.number_of_{{ loop_item.name }} | int <= loop_item.max_value|int"
        - "environment_definition.customer.primary.number_of_{{ loop_item.name }} | int % 2 == 0"
      fail_msg: "The value {{ environment_definition['customer']['primary']['number_of_' + loop_item.name] }} for environment_definition.customer.primary.number_of_{{ loop_item.name }} is not valid. Only {{ 'even numbers in [2-' + loop_item.max_value|string + '] are valid' if environment_definition.customer.deployment_model | lower is not search('aio') else '0 is valid' }}"
    loop:
      - { 'name': 'prts', 'max_value': "{{ 4 if environment_definition.customer.deployment_model | lower is not search('aio') else 0 }}" }
      - { 'name': 'mcs', 'max_value': "{{ 6 if environment_definition.customer.deployment_model | lower is not search('aio') else 0 }}" }
      - { 'name': 'dcs', 'max_value': "{{ 12 if environment_definition.customer.deployment_model | lower is not search('aio') else 0 }}" }
    loop_control:
      loop_var: loop_item
      label: "{{ 'number_of_' + loop_item.name }}"

  - name: check if ata value is valid
    assert:
      that:
        - not environment_definition.customer.ata | lower | regex_search('yes|no|true|false') == none
      fail_msg: "ATA is not valid. Only yes/no/true/false are valid"
    when: environment_definition.customer.deployment_model | lower is not search('aio')

  - name: check if disaster recovery value is valid
    assert:
      that:
        - not environment_definition.customer.disaster_recovery | lower | regex_search('yes|no|true|false') == none
      fail_msg: "disaster_recovery is not valid. Only yes/no/true/false are valid"

  - name: check if primary octets value is valid
    assert:
      that:
        - not environment_definition.customer.primary.octets | regex_search('^\d{1,3}\.\d{1,3}\.\d{1,3}$') == none
      fail_msg: "primary octets is not valid. Only three octets (xxx.xxx.xxx) format is valid"

  - name: check if secondary octets value is valid
    assert:
      that:
        - not environment_definition.customer.secondary.octets | regex_search('^\d{1,3}\.\d{1,3}\.\d{1,3}$') == none
      fail_msg: "secondary octets is not valid. Only three octets (xxx.xxx.xxx) format is valid"
    when:
      - environment_definition.customer.disaster_recovery
      - environment_definition.customer.secondary.octets != none

  - name: check if release version value is valid
    assert:
      that:
        - not environment_definition.customer.version.release | upper | regex_search('R\d+') == none
      fail_msg: "customer.version.release is not valid. Only R followed by version number (Ex. R9.1.3) format is valid"

  - name: check if primary puppet server name value is valid
    assert:
      that:
        - not environment_definition.puppet.primary.server_name | lower | regex_search('alln1qspupp0[1-4]|sastgpupp01') == none
      fail_msg: "Primary Puppet server_name is not valid. Only alln1qspupp01 through 04 are valid"

  - name: check if secondary puppet server name value is valid
    assert:
      that:
        - not environment_definition.puppet.secondary.server_name | lower | regex_search('alln1qspupp0[1-4]|sastgpupp01') == none
      fail_msg: "Secondary Puppet server_name is not valid. Only alln1qspupp01 through 04 are valid"
    when:
      - environment_definition.customer.disaster_recovery

  - name: check if primary yum server name value is valid
    assert:
      that:
        - not environment_definition.yum.primary.server_name | lower | regex_search('alln1qsyumrpp0[1-2]|sastgyrep01') == none
      fail_msg: "Primary Yum server_name is not valid. Only alln1qsyumrpp01 through 02 are valid"

  - name: check if secondary yum server name value is valid
    assert:
      that:
        - not environment_definition.yum.secondary.server_name | lower | regex_search('alln1qsyumrpp0[1-2]|sastgyrep01') == none
      fail_msg: "Secondary Yum server_name is not valid. Only alln1qsyumrpp01 through 02 are valid"
    when:
      - environment_definition.customer.disaster_recovery

  - name: verify that primary datacenter is supported
    assert:
      that:
        - "datacenters[environment_definition.datacenter.primary.name] is defined"
      fail_msg: "The primary datacenter selected, {{ environment_definition.datacenter.primary.name }}, is not in the list of supported datacenters. Aborting!"

  - name: verify that secondary datacenter is supported
    assert:
      that:
        - "datacenters[environment_definition.datacenter.secondary.name] is defined"
      fail_msg: "The secondary datacenter selected, {{ environment_definition.datacenter.secondary.name }}, is not in the list of supported datacenters. Aborting!"
    when:
      - environment_definition.customer.disaster_recovery

  - name: verify if selected primary datacenter supports deployment model
    assert:
      that:
        - "datacenters[environment_definition.datacenter.primary.name]['deptype'] is search(environment_definition.customer.deployment_model[-1:])"
      fail_msg: "The datacenter selected, {{ environment_definition.datacenter.primary.name }}, only supports the {{ 'on-prem' if datacenters[environment_definition.datacenter.primary.name]['deptype'] is search('a') else 'hosted' }} deployment model. Aborting!"

  - name: verify if selected secondary datacenter supports deployment model
    assert:
      that:
        - "datacenters[environment_definition.datacenter.secondary.name]['deptype'] is search(environment_definition.customer.deployment_model[-1:])"
      fail_msg: "The datacenter selected, {{ environment_definition.datacenter.secondary.name }}, only supports the {{ 'on-prem' if datacenters[environment_definition.datacenter.secondary.name]['deptype'] is search('a') else 'hosted' }} deployment model. Aborting!"
    when:
      - environment_definition.customer.disaster_recovery

  - name: check if ata and disaster_recovery values are in conflict
    assert:
      that:
        - environment_definition.customer.ata != environment_definition.customer.disaster_recovery
      fail_msg: "Geo-redundancy and ATA Relay are mutually exclusive. Aborting!"
    when:
      - environment_definition.customer.deployment_model | lower is not search('aio')
      - environment_definition.customer.ata or environment_definition.customer.disaster_recovery

  - block:
    - name: verify that primary resources are separated
      assert:
        that:
          - environment_definition.datacenter.primary.resources | regex_search('\d{1,3}[,|;|\s]\s?\d{1,3}')
        fail_msg: "The primary resources list {{ environment_definition.datacenter.primary.resources }} is not a valid IP address list. Aborting!"
      when:
        - environment_definition.datacenter.primary.resources | regex_search('^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}.*\d{1,3}\.')
    - name: define the primary resources list separator
      set_fact:
        separator: "{{ ', ' if environment_definition.datacenter.primary.resources is search(', ') else ',' if environment_definition.datacenter.primary.resources is search(',') else '; ' if environment_definition.datacenter.primary.resources is search('; ') else ';' if environment_definition.datacenter.primary.resources is search(';') else ' ' }}"
    - name: verify that primary resources are valid
      assert:
        that:
          - ip_item | ipaddr
        fail_msg: "The primary resources list {{ environment_definition.datacenter.primary.resources }} is not a valid IP address list. Aborting!"
      loop: "{{ environment_definition.datacenter.primary.resources.split(separator) }}"
      loop_control:
        loop_var: ip_item
      when: ip_item | regex_search('^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}')

    - name: verify that secondary resources are valid
      assert:
        that:
          - ip_item | ipaddr
        fail_msg: "The secondary resources list {{ environment_definition.datacenter.secondary.resources }} is not a valid IP address list. Aborting!"
      loop: "{{ [environment_definition.datacenter.secondary.resources] }}"
      loop_control:
        loop_var: ip_item
      when: ip_item | regex_search('^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}')

    - name: verify that there are enough primary resources
      assert:
        that:
          - environment_definition.datacenter.primary.resources.split(separator) | length == required_number_resources|int
        fail_msg: "The resources list contains {{ environment_definition.datacenter.primary.resources.split(separator) | length }} hosts. Required number of resources is {{ required_number_resources }}. Aborting!"
      vars:
        required_number_resources: "{{ 1 if environment_definition.customer.deployment_model | lower is search('aio') else 2 }}"
    - name: verify that there are enough secondary resources
      assert:
        that:
          - environment_definition.datacenter.secondary.resources.split(separator) | length == required_number_resources|int
        fail_msg: "The resources list contains {{ environment_definition.datacenter.secondary.resources | length }} hosts. Required number of resources is {{ required_number_resources }}. Aborting!"
      vars:
        required_number_resources: '1'
      when:
        - environment_definition.customer.disaster_recovery

    - name: reformat primary resources list
      set_fact:
        primary_resources: "{{ primary_resources|default([]) + [ip_item] }}"
      loop: "{{ environment_definition.datacenter.primary.resources.split(separator) }}"
      loop_control:
        loop_var: ip_item
    when:
      - environment_definition.customer.deployment_model is search('a') and environment_definition.customer.deployment_model is not search('h')

  - block:
    - name: verify that primary resources are not provided
      assert:
        that:
          - environment_definition.datacenter.primary.resources == none
        fail_msg: "The resources list {{ environment_definition.datacenter.primary.resources }} is not valid for a hosted deployment. Aborting!"
    when:
      - environment_definition.customer.deployment_model is search('h')

  - name: check if localhost's IP address is private
    shell: ip a show $(ip link | grep '2:' | head -1 | awk '{print $2}') | grep 'inet ' | cut -d '/' -f1 | awk '{print $2}' | grep '192\.168\.' || echo 'Not local'
    register: localhost_ip
  
  - name: define template variables
    set_fact:
      use_bastion: "{{ true if localhost_ip.stdout is search('192.168.') else false }}"
      number_of_prts: "{{ environment_definition.customer.primary.number_of_prts }}"
      number_of_mcs: "{{ environment_definition.customer.primary.number_of_mcs }}"
      number_of_dcs: "{{ environment_definition.customer.primary.number_of_dcs }}"

  - name: detect directory owner
    shell: stat -c '%U' {{ auto_dir }}/Bash
    register: dir_owner

  - name: detect directory group
    shell: stat -c '%G' {{ auto_dir }}/Bash
    register: dir_group

  - name: generate customer inventory
    copy:
      src: "files/inventory{{ environment_definition.customer.deployment_model }}/"
      dest: "{{ auto_dir + '/inventories/' + SYS_NAME|basename|splitext|first|lower }}"
      owner: "{{ dir_owner.stdout }}"
      group: "{{ dir_group.stdout }}"

  - name: add disaster recovery to customer inventory
    copy:
      src: "files/drinventory{{ environment_definition.customer.deployment_model }}/"
      dest: "{{ auto_dir + '/inventories/' + SYS_NAME|basename|splitext|first|lower }}"
      owner: "{{ dir_owner.stdout }}"
      group: "{{ dir_group.stdout }}"
    when: environment_definition.customer.disaster_recovery

  - name: customize inventory
    template:
      src: "{{ tmpl_item.name }}"
      dest: "{{ tmpl_item.dest }}"
      owner: "{{ dir_owner.stdout }}"
      group: "{{ dir_group.stdout }}"
    loop:
      - { name: 'templates/all.j2', dest: "{{ auto_dir + '/inventories/' + SYS_NAME|basename|splitext|first|lower + '/group_vars/all.yml' }}" }
      - { name: 'templates/hosts.j2', dest: "{{ auto_dir + '/inventories/' + SYS_NAME|basename|splitext|first|lower + '/hosts.yml' }}" }
    loop_control:
      loop_var: tmpl_item

  check_mode: no
  tags: [ 'always', 'define_inventory' ]
