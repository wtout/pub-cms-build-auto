---
# Tasks to add vm to puppet class
- block:
  - name: check if updateNode.pl exists
    stat:
      path: '/opt/puppet/qs_scripts/updateNode.pl'
    register: script_stat
    run_once: true
  - assert:
      that: script_stat.stat.exists
      fail_msg: 'Script to add vm to puppet class does not exist. Aborting!'
    run_once: true
  - block:
    - name: define VM's puppet class names list
      set_fact:
        vmtype_class_list: "{{[class_list1] + [class_list2] + [class_list3] if class_list3 != '' else [class_list1] + [class_list2]}}"
      vars:
        class_list1: "{{'EM7QSUtils' if 'em7' in group_names else 'QSUtils'}}"
        class_list2: "{{'EM7PrimaryDB' if ('em7db' in group_names and '01' in inventory_hostname) else 'EM7SecondaryDB' if ('em7db' in group_names and '02' in inventory_hostname) else 'EM7ApplicationServer' if 'em7prt' in group_names else 'LinuxJumpServer' if 'lnxjmp' in group_names else 'RelayServer' if 'rly' in group_names else 'SplunkSearchHead01' if inventory_hostname == 'splsrc01' else 'SplunkSearchHead02' if inventory_hostname == 'splsrc02' else 'SplunkIndexer' if 'splind' in group_names else 'SplunkClusterMaster' if 'splmas' in group_names else 'SplunkDeployer' if 'spldpl' in group_names else ''}}"
        class_list3: "{{'MariaDBPrimary' if inventory_hostname == 'rly01' else ''}}"
    - name: remove VM from puppet classes
      shell: >
        ./updateNode.pl {{class_item}} {{vm.name}} remove;
        grep {{ vm.name }} {{ class_item }} || echo "updateNode succeeded"
      args:
        chdir: '/opt/puppet/qs_scripts'
      become: "{{ true if (puppet.vmname is search('01') or puppet.vmname is search('02')) else false }}"
      register: puppet_class
      loop: "{{vmtype_class_list}}"
      loop_control:
        loop_var: class_item
      when:
        - not ansible_check_mode
        - class_item != ''
      until: puppet_class.stdout is search('updateNode succeeded')
      retries: 3
      failed_when: puppet_class.stdout is not search('updateNode succeeded')
    when: script_stat.stat.exists
  delegate_to: "{{groups['puppet']|first}}"
  tags: puppet
