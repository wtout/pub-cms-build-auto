---
# tasks to check the sync status for the EM7 DBs
- name: Check the sync status
  when: "'em7db' in group_names"
  become: "{{ true if ansible_user != 'root' else false }}"
  block:
    - name: Checking sync status
      block:
        - name: Check sync status 1
          ansible.builtin.command: grep 'ds:' /proc/drbd
          register: reg_sync_status1
          changed_when: false
          failed_when: reg_sync_status1.stdout is not search('UpToDate/UpToDate')
          check_mode: false
        - name: Define sync_status 1
          ansible.builtin.set_fact:
            sync_status: 'UpToDate'
        - name: Reset the sync rate
          ansible.builtin.command: /sbin/drbdadm adjust all
          register: reset_sync_rate
          changed_when: reset_sync_rate.rc == 0
      rescue:
        - name: Increase sync rate
          ansible.builtin.include_role:
            name: vm_configuration_iso
            tasks_from: task_increase_sync_rate.yml
        - name: Get the sync complete delay
          ansible.builtin.command: grep 'finish:' /proc/drbd
          register: reg_sync_delay
          changed_when: false
          check_mode: false
        - name: Define polling_intervals
          ansible.builtin.set_fact:
            polling_intervals: "{{ (mydelaysecs | int / 30) | round | int }}"
          vars:
            mydelay: "{{ reg_sync_delay.stdout | regex_replace('^.*finish: (.+) speed:.*$', '\\1') | split(':') }}"
            mydelaysecs: "{{ (mydelay[0] | int * 3600) + (mydelay[1] | int * 60) + mydelay[2] | int }}"
        - name: Checking sync status 2
          block:
            - name: Check sync status 2
              ansible.builtin.command: grep 'ds:' /proc/drbd
              register: reg_sync_status2
              changed_when: false
              failed_when: reg_sync_status2.stdout is not search('UpToDate/UpToDate')
              until: reg_sync_status2 is succeeded
              retries: "{{ polling_intervals }}"
              delay: 60
              check_mode: false
            - name: Define sync_status 2
              ansible.builtin.set_fact:
                sync_status: 'UpToDate'
            - name: Reset the sync rate
              ansible.builtin.command: /sbin/drbdadm adjust all
              register: reset_sync_rate
              changed_when: reset_sync_rate.rc == 0
          rescue:
            - name: Define sync_status 2
              ansible.builtin.set_fact:
                sync_status: 'Inconsistent'
      always:
        - name: Ensure sync is complete
          ansible.builtin.assert:
            that: sync_status == 'UpToDate'
