---
# tasks to get the license status for the EM7 DBs
- name: Get license status
  vars:
    db_list: "{{ ansible_play_hosts | select('search', 'em7db') if groups['em7'] | length > 1 else ansible_play_hosts | select('search', 'em7') }}"
  run_once: true
  block:
    - name: Get primary DBs
      when: inventory_hostname is search('em7db')
      block:
        - name: Check if /proc/drbd exists
          ansible.builtin.stat:
            path: '/proc/drbd'
          register: reg_drbd_file
          loop: "{{ db_list }}"
          loop_control:
            loop_var: db_item
          delegate_to: "{{ db_item }}"
          become: true
        - name: Define status_message1
          ansible.builtin.set_fact:
            status_message1: "{{ status_message1 | default([]) | union([db_item + ' configured: ' + reg_drbd_file.results | selectattr('db_item', 'equalto', db_item) | map(attribute='stat.exists') | list | join]) }}" # noqa: yaml[line-length]
          loop: "{{ db_list }}"
          loop_control:
            loop_var: db_item
          delegate_to: "{{ db_item }}"
        - name: Assert configuration is done
          ansible.builtin.assert:
            that:
              - "msg_item is search('configured: True')"
            fail_msg: "{{ msg_item }}"
          loop: "{{ status_message1 }}"
          loop_control:
            loop_var: msg_item
          when: status_message1 != []
        - name: Get primary DB
          ansible.builtin.shell:
            cmd: set -o pipefail && grep 'ro:' /proc/drbd | head -1 | awk -F 'ro:' '{print $NF}' | cut -d '/' -f1
            executable: /bin/bash
          register: reg_primary_check
          changed_when: false
          loop: "{{ db_list }}"
          loop_control:
            loop_var: db_item
          delegate_to: "{{ db_item }}"
          become: true
          check_mode: false
          args:
            warn: false
        - name: Define primary DB list
          ansible.builtin.set_fact:
            primary_db_list: "{{ primary_db_list | default([]) | union([db_item]) }}"
          when: reg_primary_check.results | selectattr('db_item', 'equalto', db_item) | map(attribute='stdout') | list | first == 'Primary'
          loop: "{{ db_list }}"
          loop_control:
            loop_var: db_item
    - name: Checking licensed state
      when: inventory_hostname is search('em7db') or groups['em7'] | length == 1
      block:
        - name: Check licensed state
          ansible.builtin.shell: |
            /opt/em7/bin/licensed_state
          args:
            warn: false
          register: reg_lic_state
          changed_when: false
          loop: "{{ primary_db_list | default(groups['em7'] if groups['em7'] | length == 1 else []) }}"
          loop_control:
            loop_var: db_item
          delegate_to: "{{ db_item }}"
          become: true
          check_mode: false
      rescue:
        - name: Define status_message2
          ansible.builtin.set_fact:
            status_message2: "{{ status_message2 | default([]) | union([db_item + ': ' + reg_lic_state.results | selectattr('db_item', 'equalto', db_item) | map(attribute='stdout') | list | join if reg_lic_state.results | selectattr('db_item', 'equalto', db_item) | select('search', 'stdout') | length > 0 else reg_lic_state.results | selectattr('db_item', 'equalto', db_item) | map(attribute='msg') | list | join]) }}" # noqa: yaml[line-length]
          loop: "{{ primary_db_list | default(groups['em7'] if groups['em7'] | length == 1 else []) }}"
          loop_control:
            loop_var: db_item
    - name: Assert DB is licensed
      ansible.builtin.assert:
        that:
          - msg_item is search('Appliance is licensed')
        fail_msg: "{{ msg_item }}"
      loop: "{{ status_message2 }}"
      loop_control:
        loop_var: msg_item
      when: status_message2 | default([]) != []
