---
# Tasks to generate certificate for em7 vm
- name: Generate certificate for EM7 VM
  when: inventory_hostname is search('em7')
  block:
    - name: Generate certificate for EM7 message and data collector VM
      when:
        - customer.version.release is search('9.2')
        - inventory_hostname is regex('mc|dc')
      block:
        - name: Check if generate-cert.sh exists
          ansible.builtin.stat:
            path: '/opt/em7/share/ssl/generate-cert.sh'
          register: script1_stat
        - name: Assert that the script to generate certificates for EM7 exists
          ansible.builtin.assert:
            that: script1_stat.stat.exists
            fail_msg: 'Script to generate certificates for em7 does not exist. Aborting!'
        - name: Generate certificate for EM7 VM
          ansible.builtin.command: ./generate-cert.sh /etc/ssl/certs/collector_db.key /etc/ssl/certs/collector_db.crt
          args:
            chdir: '/opt/em7/share/ssl'
          register: generate_cert
          changed_when: generate_cert.rc == 0
          when: script1_stat.stat.exists
          become: "{{ true if inventory_hostname is search('em7') else false }}"

    - name: Check if generate-ngx-cert.sh exists
      ansible.builtin.stat:
        path: '/opt/em7/share/ssl/generate-ngx-cert.sh'
      register: script2_stat
    - name: Assert that the script to generate nginx certificates for EM7 exists
      ansible.builtin.assert:
        that: script2_stat.stat.exists
        fail_msg: 'Script to generate nginx certificates for em7 does not exist. Aborting!'
    - name: Generating certificates
      when: script2_stat.stat.exists
      become: "{{ true if ansible_user != 'root' else false }}"
      block:
        - name: Check if script has CRLF line terminators
          ansible.builtin.command: file /opt/em7/share/ssl/generate-ngx-cert.sh
          register: file_status
          changed_when: false
          check_mode: false
        - name: Remove CRLF from script
          when: file_status.stdout is search('CRLF line terminators')
          block:
            - name: Remove CR from script
              ansible.builtin.shell: tr -d '\r' <generate-ngx-cert.sh> cleanfile.sh
              args:
                chdir: /opt/em7/share/ssl
              register: remove_cr
              changed_when: remove_cr.rc == 0
            - name: Replace the faulty script with the corrected one
              ansible.builtin.copy:
                src: /opt/em7/share/ssl/cleanfile.sh
                dest: /opt/em7/share/ssl/generate-ngx-cert.sh
                remote_src: true
                force: true
                owner: root
                group: root
                mode: '755'
            - name: Delete the temporary file
              ansible.builtin.file:
                path: /opt/em7/share/ssl/cleanfile.sh
                state: absent
        - name: Generate nginx certificate for EM7 VM
          ansible.builtin.command: ./generate-ngx-cert.sh
          args:
            chdir: '/opt/em7/share/ssl'
          register: generate_ngx_cert
          changed_when: generate_ngx_cert.rc == 0
        - name: Create /home/em7release/.puppetlabs/etc/puppet if it doesn't exist
          ansible.builtin.file:
            path: '/home/em7release/.puppetlabs/etc/puppet'
            state: directory
            mode: '775'
            owner: "{{ ansible_user }}"
            group: "{{ ansible_user }}"
        - name: Create /home/em7release/.puppetlabs/etc/puppet/puppet.conf if it doesn't exist
          ansible.builtin.file:
            path: '/home/em7release/.puppetlabs/etc/puppet/puppet.conf'
            state: touch
            mode: '664'
            owner: "{{ ansible_user }}"
            group: "{{ ansible_user }}"
        - name: Update puppet.conf
          ansible.builtin.lineinfile:
            path: '/home/em7release/.puppetlabs/etc/puppet/puppet.conf'
            line: "{{ line_item }}"
            owner: "{{ ansible_user }}"
            group: "{{ ansible_user }}"
          loop:
            - '[agent]'
            - "certname = em7release.{{ vm.name }}.{{ sysconfig.secondary.domain_name if 'dr' in group_names else sysconfig.primary.domain_name }}"
            - "server = {{ puppet.secondary.fqdn if 'dr' in group_names else puppet.primary.fqdn }}"
          loop_control:
            loop_var: line_item
    - name: Create em7 certificate
      ansible.builtin.command: /usr/local/bin/puppet agent --server {{ puppet.secondary.fqdn if 'dr' in group_names else puppet.primary.fqdn }} --test
      register: puppet_agent_cmd
      changed_when: puppet_agent_cmd.rc == 0
      failed_when: puppet_agent_cmd.stdout is not search('Creating a new SSL key for')
