---
# tasks to configure cluster on EM7 DB VM
- name: Configure cluster
  when: inventory_hostname is search('em7db')
  become: "{{ true if ansible_user != 'root' else false }}"
  block:
    - name: Check if /etc/drbd.d/r0.res exists
      ansible.builtin.stat:
        path: /etc/drbd.d/r0.res
      register: reg_res_file
    - name: Deploying SSH keys
      when:
        - inventory_hostname is search('02')
      block:
        - name: Generate SSH keys
          ansible.builtin.include_role:
            name: vm_configuration_iso
            tasks_from: task_generate_ssh_keys.yml
        - name: Deploy SSH keys
          ansible.builtin.include_role:
            name: vm_configuration_iso
            tasks_from: task_deploy_ssh_keys.yml
    # yamllint disable rule:line-length
    - name: Run coro_install script on DB01
      when:
        - "'dr' not in group_names"
        - inventory_hostname is search('01')
      block:
        - name: Define the answers for DB01
          ansible.builtin.set_fact:
            answers: "{{ 'yes\\n' if reg_res_file.stat.exists else '' }}3\\n1\\ny\\ny\\n1\\n{{ hostvars['em7db02']['vm']['name'] }}\\n{{ hostvars['em7db02']['netconfig']['nic2']['ipaddress'] }}\\n{{ hostvars['em7db02']['netconfig']['nic1']['ipaddress'] }}\\n{{ hostvars['drem7db01']['vm']['name'] }}\\n{{ hostvars['drem7db01']['netconfig']['nic1']['ipaddress'] }}\\n{{ vip.db }}\\n26\\n250\\ny"
        - name: Run coro_install script
          ansible.builtin.shell: |
            echo -e "{{ answers }}" | /opt/em7/bin/coro_install
          register: coro_install_status1
          changed_when: coro_install_status1.rc == 0
          ignore_errors: true
          failed_when:
            - coro_install_status1.rc != 0
            - coro_install_status1.rc != 32
        - name: Clean mysql resource
          ansible.builtin.command: crm resource clean mysql
          register: reg_clean_mysql1
          changed_when: reg_clean_mysql1.rc == 0
    - name: Run coro_install script on DB02
      when: inventory_hostname is search('02')
      block:
        - name: Define the answers for DB02
          ansible.builtin.set_fact:
            answers: "{{ 'yes\\n' if reg_res_file.stat.exists else '' }}3\\n2\\ny\\ny\\n1\\n{{ hostvars['em7db01']['vm']['name'] }}\\n{{ hostvars['em7db01']['netconfig']['nic2']['ipaddress'] }}\\n{{ hostvars['em7db01']['netconfig']['nic1']['ipaddress'] }}\\n{{ hostvars['drem7db01']['vm']['name'] }}\\n{{ hostvars['drem7db01']['netconfig']['nic1']['ipaddress'] }}\\n250\\ny"
        - name: Run coro_install script
          ansible.builtin.shell: |
            echo -e "{{ answers }}" | /opt/em7/bin/coro_install
          register: coro_install_status2
          changed_when: coro_install_status2.rc == 0
          ignore_errors: true
          failed_when:
            - coro_install_status2.rc != 0
            - coro_install_status2.rc != 32
        - name: Debug message
          ansible.builtin.debug:
            msg:
              - "{{ coro_install_status2.stderr }}"
              - "{{ coro_install_status2.stderr is regex('t connect to MySQL server on.*192.170.170.10') }}"
        - name: Update silo.conf on VM
          ansible.builtin.replace:
            path: /etc/silo.conf
            regexp: '^({{ task_item.param }}) (.*)$'
            replace: '\g<1> {{ task_item.value }}'
          loop:
            - { param: 'ipaddr =', value: "{{ em7db_ip2_list[0] }}" }
          loop_control:
            loop_var: task_item
          when:
            - coro_install_status2.stderr is regex('t connect to MySQL server on.*192.170.170.10')
        - name: Clean mysql resource
          ansible.builtin.command: crm resource clean mysql
          register: reg_clean_mysql2
          changed_when: reg_clean_mysql2.rc == 0
    # yamllint enable rule:line-length
    - name: Run coro_install script on DR DB01
      when:
        - "'dr' in group_names"
        - inventory_hostname is search('01')
      block:
        - name: Define the answers for DRDB01
          ansible.builtin.set_fact:
            answers: "{{ 'yes\\n' if reg_res_file.stat.exists else '' }}3\\n3\\ny\\ny\\n1\\n{{ vip.db }}\\n250\\ny"
        - name: Run coro_install script
          ansible.builtin.shell: |
            echo -e "{{ answers }}" | /opt/em7/bin/coro_install
          register: coro_install_status3
          changed_when: coro_install_status3.rc == 0
          ignore_errors: true
          failed_when:
            - coro_install_status3.rc != 0
            - coro_install_status3.rc != 32
        - name: Clean mysql resource
          ansible.builtin.command: crm resource clean mysql
          register: reg_clean_mysql3
          changed_when: reg_clean_mysql3.rc == 0
