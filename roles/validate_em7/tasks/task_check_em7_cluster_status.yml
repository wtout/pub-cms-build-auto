---
# Tasks to check the EM7 cluster status
- name: Check primary DB
  ansible.builtin.include_role:
    name: sanity
    tasks_from: task_check_primary_db.yml
  when:
    - vm.name is search('em7db')
    - primary_db is not defined
- name: Define primary DB hostname
  ansible.builtin.set_fact:
    primarydb_hostname: "{{ vm.name }}"
  when:
    - primary_db is defined
    - primary_db
  loop: "{{ groups[('dr' if 'dr' in group_names else '') + 'em7db'] }}"
  loop_control:
    loop_var: db_item
- name: Checking cluster status
  when:
    - vm.name is search('em7db')
  block:
    - name: Check cluster status
      ansible.builtin.command: crm_mon -1
      register: reg_crm_mon
      changed_when: false
      check_mode: false
      become: "{{ true if ansible_user != 'root' else false }}"
  rescue:
    - name: Define em7_cluster_status 1
      ansible.builtin.set_fact:
        em7_cluster_status: "{{ em7_cluster_status | default([]) + ['EM7 cluster is not up'] }}"
- name: Defining EM7 cluster status
  when:
    - primarydb_hostname is defined
  block:
    - name: Defining em7_cluster_status
      when:
        - reg_crm_mon is succeeded
      block:
        - name: Define em7_cluster_status 2
          ansible.builtin.set_fact:
            em7_cluster_status: "{{ em7_cluster_status | default([]) | union([missing_node | join + ' is not in the cluster']) }}"
          when: missing_node != []
          vars:
            mydbgn: "{{ ('dr' if 'dr' in group_names else '') + 'em7db' }}"
            ha_db_nodes: "{{ [hostvars[groups[mydbgn] | first]['vm']['name']] | union([hostvars[groups[mydbgn] | last]['vm']['name']]) | join }}"
            online_nodes: "{{ reg_crm_mon.stdout_lines | select('search', 'Online: ') | list | regex_replace('^.* \\[ (.*) \\].*$', '\\1') }}"
            missing_node: "{{ online_nodes | split(' ') | difference(ha_db_nodes) }}"
        - name: Define em7_cluster_status 3
          ansible.builtin.set_fact:
            em7_cluster_status: "{{ em7_cluster_status | default([]) | union([master_nodes | regex_replace(myprfx, '') | regex_replace('a|h', '') + mystr]) }}"
          when: not hostvars[master_nodes | regex_replace(myprfx, '') | regex_replace('a|h', '')]['primary_db']
          vars:
            mystr: ' is not primary'
            myprfx: "{{ customer.primary.name_prefix if 'dr' not in group_names else customer.secondary.name_prefix }}"
            master_nodes: "{{ reg_crm_mon.stdout_lines | select('search', 'Masters: ') | list | regex_replace('^.* \\[ (.*) \\].*$', '\\1') }}"
        - name: Define em7_cluster_status 4
          ansible.builtin.set_fact:
            em7_cluster_status: "{{ em7_cluster_status | default([]) | union([myservice | first | trim + ': ' + myservice | last]) }}"
          loop: "{{ reg_crm_mon.stdout_lines | select('regex', ':\t') | list }}"
          loop_control:
            loop_var: loop_item
          vars:
            myservice: "{{ loop_item | split('\t') | list }}" # noqa: no-tabs
          when: myservice | last | split(' ') | last != primarydb_hostname
    - name: Check sync status
      ansible.builtin.command: |
        grep ro: /proc/drbd
      register: reg_sync_status
      changed_when: false
      check_mode: false
    - name: Define em7_cluster_status 5
      ansible.builtin.set_fact:
        em7_cluster_status: "{{ em7_cluster_status | default([]) | union(['EM7 DB sync needs to be redone']) }}"
      when:
        - reg_sync_status.stdout is search('WFConnection')
    - name: Define em7_cluster_status 6
      ansible.builtin.set_fact:
        em7_cluster_status: "{{ em7_cluster_status | default([]) | union(['EM7 DB sync is not running correctly']) }}"
      when:
        - (primary_db and mysync != 'Primary/Secondary') or (not primary_db and mysync != 'Secondary/Primary')
      vars:
        mysync: "{{ reg_sync_status.stdout | regex_replace('^.*ro:(.*) ds.*$', '\\1') }}"
    - name: Assert that em7_cluster is clear
      ansible.builtin.assert:
        that: em7_cluster_status == []
        fail_msg: "{{ em7_cluster_status }}"
