---
# tasks file to delete datastores
- name: Delete datastores
  delegate_to: "{{ groups['bastion'][0] if (groups['bastion'] | length >= 1 and bastion.address != [] and bastion.address != ['']) else 'localhost' }}"
  block:
    - name: Get VM info on {{ resource }}
      community.vmware.vmware_vm_info:
        hostname: "{{ resource }}"
        username: "{{ information.hostuser }}"
        password: "{{ information.hostpass }}"
        vm_type: vm
        validate_certs: false
      check_mode: false
      register: reg_vm_info
    - name: Define vm names list on {{ resource }}
      ansible.builtin.set_fact:
        host_vm_names: "{{ reg_vm_info.virtual_machines | map(attribute='guest_name') | list }}"
    - name: Deleting datastores
      when: reg_vm_info.virtual_machines | map(attribute='guest_name') | reject('search', 'vCLS-') | list | length == 0
      block:
        - name: Delete vCLS VM on {{ resource }}
          community.vmware.vmware_guest:
            hostname: "{{ resource }}"
            username: "{{ information.hostuser }}"
            password: "{{ information.hostpass }}"
            name: "{{ reg_vm_info.virtual_machines | map(attribute='guest_name') | select('search', 'vCLS-') | list | first }}"
            state: absent
            force: true
            validate_certs: false
          when: reg_vm_info.virtual_machines | map(attribute='guest_name') | select('search', 'vCLS-') | list | length > 0
        - name: Define existing datastores on {{ resource }}
          community.vmware.vmware_datastore_info:
            hostname: "{{ resource }}"
            username: "{{ information.hostuser }}"
            password: "{{ information.hostpass }}"
            validate_certs: false
          register: detected_datastores
        - name: Unmount datastore on {{ resource }}
          community.vmware.vmware_host_datastore:
            hostname: "{{ resource }}"
            username: "{{ information.hostuser }}"
            password: "{{ information.hostpass }}"
            datastore_name: "{{ datastore_item.name }}"
            validate_certs: false
            state: absent
          register: response
          ignore_errors: true
          loop: "{{ detected_datastores.datastores }}"
          loop_control:
            loop_var: datastore_item
          when:
            - detected_datastores.datastores != []
            - datastore_item is search(customer.primary.name_prefix) or (datastore_item is search(customer.secondary.name_prefix) if customer.disaster_recovery)
            - datastore_item.name is search('ssd|raid')
        - name: Delete files
          ansible.builtin.include_tasks:
            file: task_delete_files.yml
            apply:
              vars:
                dsname: "{{ datastore_item.name }}"
                resname: "{{ resource }}"
          loop: "{{ detected_datastores.datastores }}"
          loop_control:
            loop_var: datastore_item
          when:
            - detected_datastores.datastores != []
            - datastore_item is search(customer.primary.name_prefix) or (datastore_item is search(customer.secondary.name_prefix) if customer.disaster_recovery)
            - datastore_item.name is search('sas')
        - name: Rename datastore on {{ resource }}
          community.vmware.vmware_object_rename:
            hostname: "{{ information.address }}"
            username: "{{ credentials.username }}"
            password: "{{ credentials.password }}"
            new_name: "{{ 'datastore' + (loop_idx + 1) | string + '-' + resource | replace('.', '-') }}"
            object_name: "{{ datastore_item.name }}"
            object_type: Datastore
            validate_certs: false
          loop: "{{ detected_datastores.datastores }}"
          loop_control:
            loop_var: datastore_item
            index_var: loop_idx
          when:
            - detected_datastores.datastores != []
            - datastore_item is search(customer.primary.name_prefix) or (datastore_item is search(customer.secondary.name_prefix) if customer.disaster_recovery)
            - datastore_item.name is search('sas|ata-donotuse')
