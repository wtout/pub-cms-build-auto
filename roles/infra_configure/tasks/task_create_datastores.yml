---
# tasks file for create_datastores
- block:
  - name: Get host canonical on {{ resource }}
    vmware_target_canonical_info:
      hostname: "{{ information.address }}"
      username: "{{ credentials.username }}"
      password: "{{ credentials.password }}"
      esxi_hostname: "{{ resource }}"
      validate_certs: no
    register: storage_devices

  - name: define canonical on {{ resource }}
    set_fact:
      canonical: "{{ storage_devices.scsi_tgt_info | dict2items | map(attribute='value') | map(attribute='scsilun_canonical') | list | first | dictsort | select('search', 'ScsiDisk') | list }}"

  - name: initialize lists
    set_fact:
      ds_name: []
      dnuds_name: []
      sdid: []
  - name: define host datastore names
    set_fact:
      ds_name: "{{ ds_name|default([]) | union([customer_prefix + '-esxi-a-%02d'|format(mycount|int) + '-' + type_item]) }}"
    vars:
      mycount: "{{ count|int + 1 }}"
    loop:
      - "sas"
      - "ssd"
    loop_control:
      loop_var: type_item
  - name: define 'donotuse' datastore names
    set_fact:
      dnuds_name: "{{ dnuds_name|default([]) | union([myname]) }}"
    vars:
      myidx: "{{ idx|int + 1 if canonical|length > 1 else '' }}"
      mycount: "{{ count|int + 1 }}"
      myname: "{{ customer_prefix + '-esxi-only-%02d'|format(mycount|int) + '-donotuse' + myidx }}"
    loop: "{{ canonical[2:] if canonical|length > 2 else [] }}"
    loop_control:
      loop_var: dnuds_item
      index_var: idx
  - name: define list of storage device IDs
    set_fact:
      sdid: "{{ sdid|default([]) | union([disk_item[1]]) }}"
    loop: "{{ canonical }}"
    loop_control:
      loop_var: disk_item

  - name: Get datastore info on {{ resource }}
    vmware_datastore_info:
      hostname: "{{ resource }}"
      username: "{{ information.hostuser }}"
      password: "{{ information.hostpass }}"
      schema: vsphere
      properties: ["info.name","info.vmfs.capacity","info.vmfs.extent"]
      validate_certs: no
    register: existing_datastores

  - name: define delete_default_datastore on {{ resource }}
    set_fact:
      delete_default_datastore: "{{ delete_default_datastore|default(false) or (true if ds_item.info.name is search('datastore1') else false) }}"
    loop: "{{ existing_datastores.datastores }}"
    loop_control:
      loop_var: ds_item
    when: not delete_default_datastore|default(false)

  - block:
    - name: initialize disk_info on {{ resource }}
      set_fact:
        disk_info: []
    - name: define disk info on {{ resource }}
      set_fact:
        disk_info: "{{ disk_info|default([]) | union([{'dsname': ds_item.info.name, 'diskid': ds_item.info.vmfs.extent[0].diskName, 'capacity': ds_item.info.vmfs.capacity}]) | sort(attribute='capacity', reverse=true) }}"
      loop: "{{ existing_datastores.datastores }}"
      loop_control:
        loop_var: ds_item
    - name: define list of storage device IDs sorted by capacity in a descending order
      set_fact:
        sdid: "{{ disk_info | map(attribute='diskid') | list }}"
    - block:
      - name: delete created datastores
        include_tasks: task_delete_datastores.yml
      - name: wait for datastores to be deleted on {{ resource }}
        wait_for:
          timeout: 10
      - name: create datastores
        include_tasks:
          file: new_task_create_host_datastores.yml
          apply:
            vars:
              hostid: "{{ resource }}"
              dsname: "{{ ds_item[0] }}"
              dvcname: "{{ ds_item[1] }}"
        loop: "{{ ds_name | union(dnuds_name|default([])) | zip(sdid) | list }}"
        loop_control:
          loop_var: ds_item
      when: disk_info[0].dsname is not search('sas') or disk_info[1].dsname is not search('ssd') or disk_info|length != canonical|length
    when:
      - existing_datastores.datastores != []
      - not delete_default_datastore|default(false)
      - existing_datastores.datastores|length == canonical|length

  - block:
    - block:
      - name: delete existing datastores
        include_tasks: task_delete_datastores.yml
      - name: wait for datastores to be deleted on {{ resource }}
        wait_for:
          timeout: 10
      when: (existing_datastores.datastores != [] and existing_datastores.datastores|length != canonical|length) or delete_default_datastore|default(false)
    - name: create datastores
      include_tasks:
        file: new_task_create_host_datastores.yml
        apply:
          vars:
            hostid: "{{ resource }}"
            dsname: "{{ ds_item[0] }}"
            dvcname: "{{ ds_item[1] }}"
      loop: "{{ ds_name | union(dnuds_name|default([])) | zip(sdid) | list }}"
      loop_control:
        loop_var: ds_item
    - name: Get datastore info on {{ resource }}
      vmware_datastore_info:
        hostname: "{{ resource }}"
        username: "{{ information.hostuser }}"
        password: "{{ information.hostpass }}"
        schema: vsphere
        properties: ["info.name","info.vmfs.capacity","info.vmfs.extent"]
        validate_certs: no
      register: created_datastores
    - name: initialize disk_info on {{ resource }}
      set_fact:
        disk_info: []
    - name: define disks info on {{ resource }}
      set_fact:
        disk_info: "{{ disk_info|default([]) | union([{'dsname': ds_item.info.name, 'diskid': ds_item.info.vmfs.extent[0].diskName, 'capacity': ds_item.info.vmfs.capacity}]) | sort(attribute='capacity', reverse=true) }}"
      loop: "{{ created_datastores.datastores }}"
      loop_control:
        loop_var: ds_item
    - name: define list of storage device IDs sorted by capacity in a descending order
      set_fact:
        sdid: "{{ disk_info | map(attribute='diskid') | list }}"
    - block:
      - name: delete created datastores
        include_tasks: task_delete_datastores.yml
      - name: wait for datastores to be deleted on {{ resource }}
        wait_for:
          timeout: 10
      - name: create datastores
        include_tasks:
          file: new_task_create_host_datastores.yml
          apply:
            vars:
              hostid: "{{ resource }}"
              dsname: "{{ ds_item[0] }}"
              dvcname: "{{ ds_item[1] }}"
        loop: "{{ ds_name | union(dnuds_name|default([])) | zip(sdid) | list }}"
        loop_control:
          loop_var: ds_item
      when: disk_info[0].dsname is not search('sas') or disk_info[1].dsname is not search('ssd') or disk_info|length != canonical|length
    when: existing_datastores.datastores == [] or (existing_datastores.datastores != [] and delete_default_datastore|default(false)) or existing_datastores.datastores|length != canonical|length

  run_once: true
  delegate_to: "{{ groups['bastion'][0] if (groups['bastion'] | length >= 1 and bastion.address != [] and bastion.address != ['']) else 'localhost' }}"
  tags: [ 'infra_configure', 'infra_build_nodes', 'capcheck' ]
