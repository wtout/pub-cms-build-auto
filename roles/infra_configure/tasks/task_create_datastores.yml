---
# tasks file for create_datastores
- block:
  - name: Get host canonical
    vmware_target_canonical_info:
      hostname: "{{ information.address }}"
      username: "{{ credentials.username }}"
      password: "{{ credentials.password }}"
      esxi_hostname: "{{ resource }}"
      validate_certs: no
    register: datastores
    
  - set_fact:
      canonical: "{{ datastores.scsi_tgt_info | dict2items | map(attribute='value') | list | map(attribute='scsilun_canonical') | list | first | dictsort }}"

  - set_fact:
      default_datastore_can: "{{ canonical[0][1] }}"
      ssd_datastore: "{{ canonical[1][1] }}"
      sas_datastore: "{{ canonical[2][1] }}"

  - name: Check for default datastore
    vmware_datastore_info:
      hostname: "{{ resource }}"
      username: "{{ information.hostuser }}"
      password: "{{ information.hostpass }}"
      validate_certs: no
    register: existing_datastores

  - block:
    - set_fact:
        default_datastore: "{{ existing_datastores.datastores[0].name }}"

    - name: Unmount default datastore
      vmware_host_datastore:
        hostname: "{{ resource }}"
        username: "{{ information.hostuser }}"
        password: "{{ information.hostpass }}"
        datastore_name: "{{ default_datastore }}"
        validate_certs: no
        state: absent
      register: response
      ignore_errors: true

    - name: Retry unmount default datastore
      vmware_host_datastore:
        hostname: "{{ resource }}"
        username: "{{ information.hostuser }}"
        password: "{{ information.hostpass }}"
        datastore_name: "{{ default_datastore }}"
        validate_certs: no
        state: absent
      when: response.failed
    when:
      - existing_datastores.datastores != []
      - existing_datastores.datastores[0].name is search('datastore')

  - block:
    - name: Create datastores
      vmware_host_datastore:
        hostname: "{{ resource }}"
        username: "{{ information.hostuser }}"
        password: "{{ information.hostpass }}"
        datastore_name: "{{ new_datastore.name }}"
        datastore_type: vmfs
        vmfs_device_name: "{{ new_datastore.vmfs_device_name }}"
        vmfs_version: 5
        validate_certs: no
      loop:
        - { name: "{{ customer_prefix }}-esxi-only-0{{ count | int + 1 }}-donotuse", vmfs_device_name: "{{ default_datastore_can }}" }
        - { name: "{{ customer_prefix }}-esxi-a-0{{ count | int + 1 }}-ssd", vmfs_device_name: "{{ ssd_datastore }}" }
        - { name: "{{ customer_prefix }}-esxi-a-0{{ count | int + 1 }}-sas", vmfs_device_name: "{{ sas_datastore }}" }
      loop_control:
        loop_var: new_datastore
  run_once: true
  tags: ['infra_configure', 'infra_build_nodes', 'capcheck', 'vm_creation']
