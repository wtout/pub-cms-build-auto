---
# tasks file to create port groups
- block:
  - name: get list of network names from inventory
    shell: |
      grep netname {{ inventory_dir }}/group_vars/all.yml  | awk -F 'netname: ' '{print $NF}' | sort -u | sed -e 's/"//g' -e '/^$/d'
    register: net_names
    check_mode: no
    when: net_names is not defined
  - name: define network names to create on {{ resource }}
    set_fact:
      net1: "{{ mynet1 if mynet1 != '' else customer_prefix + '-Customer-Net-Internet' }}"
      net2: "{{ mynet2 if mynet2 != '' else customer_prefix + '-Customer-Net-Outside' }}"
      net3: "{{ mynet3 if mynet3 != '' else customer_prefix + '-Internal-Net' }}"
      net4: "{{ mynet4 if mynet4 != '' else customer_prefix + '-Loadbalancer-Net' }}"
      net5: "{{ mynet5 if mynet5 != '' else customer_prefix + '-Customer-Net-Inside' }}"
      net6: "{{ mynet6 if mynet6 != '' else customer_prefix + '-EM7-DB-Heartbeat-Link' }}"
    vars:
      mynet1: "{{ net_names.stdout_lines | default([]) | select('search', 'Customer-Net-Internet') | list | join }}"
      mynet2: "{{ net_names.stdout_lines | default([]) | select('search', 'Customer-Net-Outside') | list | join }}"
      mynet3: "{{ net_names.stdout_lines | default([]) | select('search', 'Internal-Net') | list | join }}"
      mynet4: "{{ net_names.stdout_lines | default([]) | select('search', 'Loadbalancer-Net') | list | join }}"
      mynet5: "{{ net_names.stdout_lines | default([]) | select('search', 'Customer-Net-Inside') | list | join }}"
      mynet6: "{{ net_names.stdout_lines | default([]) | select('search', 'EM7-DB-Heartbeat-Link') | list | join }}"
  - name: Create port groups on {{ resource }}
    vmware_portgroup:
      hostname: "{{ information.address }}"
      username: "{{ credentials.username }}"
      password: "{{ credentials.password }}"
      hosts: "{{ resource }}"
      switch: "{{ portgroup_item.switch }}"
      portgroup: "{{ portgroup_item.name }}"
      vlan_id: "{{ portgroup_item.vlan_id | default('0') }}"
      teaming:
        active_adapters: "{{ portgroup_item.active_adapter }}"
      validate_certs: no
    loop:
      - { name: "{{ net1 }}", switch: 'vSwitch0', active_adapter: 'vmnic0' }
      - { name: "{{ net2 }}", switch: 'vSwitch1', active_adapter: 'vmnic1' }
      - { name: "{{ net3 }}", switch: 'vSwitch2', active_adapter: 'vmnic2', vlan_id: 100 }
      - { name: "{{ net4 }}", switch: 'vSwitch2', active_adapter: 'vmnic2', vlan_id: 120 }
      - { name: "{{ net5 }}", switch: 'vSwitch3', active_adapter: 'vmnic3', vlan_id: 200 }
      - { name: "{{ net6 }}", switch: 'vSwitch4', active_adapter: 'vmnic4' }
    loop_control:
      loop_var: portgroup_item
  run_once: true
  delegate_to: "{{ groups['bastion'][0] if (groups['bastion'] | length >= 1 and bastion.address != [] and bastion.address != ['']) else 'localhost' }}"
  tags: [ 'infra_configure', 'infra_build_nodes', 'capcheck' ]
