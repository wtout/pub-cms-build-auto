---
# tasks file to delete files on datastore
- name: Delete files on datastore
  delegate_to: "{{ groups['bastion'][0] if (groups['bastion'] | length >= 1 and bastion.address != [] and bastion.address != ['']) else 'localhost' }}"
  block:
    - name: Get list of directories or files from datastore
      ansible.builtin.uri:
        url: "https://{{ vcenter_address }}/folder?dcPath={{ vcenter_datacenter }}&dsName={{ dsname }}"
        user: "{{ vcenter_username }}"
        password: "{{ vcenter_password }}"
        return_content: true
        validate_certs: false
      register: reg_content
      until: reg_content is succeeded
      vars:
        vcenter_address: "{{ hostvars[groups[('dr' if 'dr' in group_names else '') + 'vcenter'][0]]['information']['address'] }}"
        vcenter_username: "{{ hostvars[groups[('dr' if 'dr' in group_names else '') + 'vcenter'][0]]['credentials']['username'] }}"
        vcenter_password: "{{ hostvars[groups[('dr' if 'dr' in group_names else '') + 'vcenter'][0]]['credentials']['password'] }}"
        vcenter_datacenter: "{{ hostvars[groups[('dr' if 'dr' in group_names else '') + 'vcenter'][0]]['information']['datacenter'] }}"
    - name: Define datastore_content
      ansible.builtin.set_fact:
        datastore_content: "{{ datastore_content | default([]) | union([loop_item.split('/') | first]) }}"
      loop: "{{ reg_content.content.split('sas\">')[1:] }}"
      loop_control:
        loop_var: loop_item
        label: "{{ loop_item.split('/') | first }}"
  rescue:
    - name: Information message
      ansible.builtin.debug:
        msg: "{{ dsname }} is empty"
  always:
    - name: Ensure {{ dsname + ' is empty' }}
      ansible.builtin.assert:
        that: datastore_content | default([]) == []
        fail_msg: "{{ ['Delete the following folders/files and rerun the automation:'] + datastore_content | default([]) }}"
