---
# Tasks to create the Splunk automation inventory
- name: Create Splunk automation inventory
  run_once: true
  delegate_to: localhost
  block:
    - name: Define facts
      ansible.builtin.set_fact:
        splunk_type: 'headend'
        tmpl_name: 'headend_inventory.yml.tmpl'
        he_inv_file_name: "headend.yml"
        tmpl_dest: "{{ spl_inventory_path }}"
        include_svc: "{{ build_svc | default(false) }}"
    - name: Create the environment inventory directory
      ansible.builtin.file:
        path: "{{ tmpl_dest }}"
        state: directory
        mode: '755'
    - name: Create {{ splunk_type + ' inventory' }}
      ansible.builtin.template:
        src: "{{ tmpl_item.name }}"
        dest: "{{ tmpl_item.dest }}"
        mode: '644'
      loop:
        - { name: "templates/{{ tmpl_name }}", dest: "{{ tmpl_dest }}/{{ he_inv_file_name }}" }
      loop_control:
        loop_var: tmpl_item
      when: inventory_hostname is not search('splfwd')
    - name: Create headend invnetory
      when: inventory_hostname is search('splfwd')
      block:
        - name: Check if deployed customers file exists
          ansible.builtin.stat:
            path: "{{ tmpl_dest }}/deployed_customers.yml"
          register: reg_deployed_customers
        - name: Create the deployed customers file
          ansible.builtin.template:
            src: 'templates/deployed_customers.yml.tmpl'
            dest: "{{ tmpl_dest }}/deployed_customers.yml"
            mode: '644'
          when: not reg_deployed_customers.stat.exists
        - name: Check if headend inventory file exists
          ansible.builtin.stat:
            path: "{{ tmpl_dest }}/{{ he_inv_file_name }}"
          register: he_inv1
        - name: Creating headend inventory file
          when: not he_inv1.stat.exists
          block:
            - name: Create headend inventory file
              ansible.builtin.include_tasks: task_create_headend_inventory_file.yml
            - name: Check if headend inventory file exists
              ansible.builtin.stat:
                path: "{{ tmpl_dest }}/{{ he_inv_file_name }}"
              register: he_inv2
        - name: Fail if Headend inventory file is not found
          ansible.builtin.assert:
            that: he_inv1.stat.exists or he_inv2.stat.exists
            fail_msg: "The headend inventory file is not available. Unable to deploy a customer forwarder without a Headend. Aborting!"
