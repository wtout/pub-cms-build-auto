---
# Tasks to update VM password
- block:
  - block:
    - name: Read customer credentials obtained from keeper
      ansible.builtin.shell: |
        head -1 ssh_passwords.yml | grep '$ANSIBLE_VAULT' 1&2>/dev/null && ansible-vault view --vault-password-file ssh-vault-password-file ssh_passwords.yml
      args:
        chdir: "{{ spl_ansible_path }}"
      register: reg_read_creds
      no_log: true
    delegate_to: localhost

  - block:
    - name: switch to customer credentials obtained from keeper
      set_fact:
        ansible_user: "{{ (reg_read_creds.stdout_lines | select('search', 'ansible_user') | first).split(': ') | last }}"
        ansible_ssh_pass: "{{ (reg_read_creds.stdout_lines | select('search', 'ansible_password') | first).split(': ') | last | replace('\"', '') }}"
      no_log: true
    - name: check connection
      wait_for_connection:
        timeout: 3
      register: reg_vm_connection
      ignore_errors: true
      check_mode: no
    - block:
      - name: revert user
        set_fact:
          ansible_user: "{{ credentials.username }}"
          ansible_ssh_pass: "{{ credentials.password }}"
        no_log: true
      - name: update credentials on customer VM
        ansible.builtin.user:
          name: "{{ (reg_read_creds.stdout_lines | select('search', 'ansible_user') | first).split(': ') | last }}"
          password: "{{ (reg_read_creds.stdout_lines | select('search', 'ansible_password') | first).split(': ') | last | replace('\"', '') | password_hash('sha512') }}"
        become: yes
      - name: Update VM's credentials
        set_fact:
          ansible_user: "{{ (reg_read_creds.stdout_lines | select('search', 'ansible_user') | first).split(': ') | last }}"
          ansible_ssh_pass: "{{ (reg_read_creds.stdout_lines | select('search', 'ansible_password') | first).split(': ') | last | replace('\"', '') }}"
        no_log: true
      when: reg_vm_connection is failed
    - shell: |
        df -h
    when: reg_read_creds is succeeded
  when: (inventory_hostname is search('splfwd') and reg_cust_creds is succeeded) or (inventory_hostname is not search('splfwd') and reg_core_creds is succeeded)
  run_once: true
  tags: integ_splunk
