---
# Tasks to download the release package
- block:
  - name: define Packages location
    set_fact:
      pkg_dir: "{{ '/data/' + auto_dir if (groups['bastion'] | length >= 1 and bastion.address != [] and bastion.address != ['']) else auto_dir }}"
  - name: check if package {{ ustomer.release }} exists
    stat:
      path: "{{ pkg_dir }}/Packages/{{ customer.release }}"
    register: package_exists
  - block:
    - name: create Packages directory if it does not exist
      file:
        path: "{{ pkg_dir }}/Packages"
        state: directory
    - name: download the package for release version {{customer.release}}
      shell: "wget --no-proxy -np -nH --cut-dirs=2 -r -R index.html http://engci-maven-master.cisco.com/artifactory/cms-quicksilver-release/{{customer.release}}/Puppet/"
      args:
        chdir: "{{ pkg_dir }}/Packages"
      async: 7200
      poll: 30
      register: pkg_dwnld
      when: not ansible_check_mode
    - name: wait on package download
      async_status:
        jid: "{{ pkg_dwnld.ansible_job_id }}"
      register: dwnld_result
      until: dwnld_result.finished
      when: not ansible_check_mode
    - name: find list of files in the downloaded package
      find:
        paths: "{{ pkg_dir }}/Packages/{{ customer.release }}"
        file_type: file
        patterns: '*.ova, *.tar, *.zip, *.gz, *.tgz, *.conf'
        recurse: yes
        get_checksum: yes
      register: files_list

    - name: get included hash
      shell: cat {{ hash_file }}
      vars:
        - hash_file: "{{ file_item.path + '.sha1' }}"
      loop: "{{ files_list.files }}"
      loop_control:
        loop_var: file_item
      register: included_hash
      when:
        - files_list.matched >= 1
        - groups['bastion'] | length >= 1 and bastion.address != [] and bastion.address != ['']

    - name: check the integrity of the package contents
      assert:
        that:
          - file_item.checksum == hash
        fail_msg: "The package {{ file_item.path }} was corrupted during download"
      vars:
        hash_file: "{{ file_item.path + '.sha1' }}"
        hash_localhost: "{{ '' if (groups['bastion'] | length >= 1 and bastion.address != [] and bastion.address != ['']) else lookup('file', hash_file) }}"
        hash_bastion: "{{ included_hash.results | selectattr('file_item.path', 'equalto', file_item.path) | map(attribute='stdout') | list | join('') if (groups['bastion'] | length >= 1 and bastion.address != [] and bastion.address != ['']) else '' }}"
        hash: "{{ hash_bastion|default([])|string if (groups['bastion'] | length >= 1 and bastion.address != [] and bastion.address != ['']) else hash_localhost }}"
      loop: "{{ files_list.files }}"
      loop_control:
        loop_var: file_item
      when: files_list.matched >= 1
    when:
      - not (package_exists.stat.exists and package_exists.stat.isdir is defined and (package_exists.stat.isdir or package_exists.stat.islnk))
  delegate_to: "{{ groups['bastion'][0] if (groups['bastion'] | length >= 1 and bastion.address != [] and bastion.address != ['']) else 'localhost' }}"
  run_once: true
  tags: [ 'get_release', 'vm_creation' ]
