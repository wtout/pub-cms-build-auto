---
# tasks to license the EM7 VM
- block:
  - name: get MAC address
    shell: ip a show ens160 | grep ether
    register: host_mac
    check_mode: no

  - name: get registration key
    shell: /usr/local/silo/proc/appliance_init.py -r
    register: registration_key
    check_mode: no

  - name: define license authorization key
    set_fact:
      license_authorization_key: '61ee336f-fe0b-4e20-9586-2a41771b4b21'
  - name: define license registration key file content
    set_fact:
      license_registration_key_file_contents: "{{ registration_key.stdout }}\n"
  - name: define license appliance type
    set_fact:
      license_appliance_type: "{{ 'db' if inventory_hostname is search('em7db') else 'cu' if inventory_hostname is search('em7dc') else 'mc' if inventory_hostname is search('em7mc') else 'ap' if inventory_hostname is search('em7prt') else 'is' if inventory_hostname is search('is4') else 'ao' }}"
  - name: define license appliance environment
    set_fact:
      license_appliance_environment: "{{ 'trial' if 'dev' in customer.name|lower else 'production' }}"
  - name: define license hostname
    set_fact:
      license_hostname: "{{ vm.name }}"
  - name: define license MAC address
    set_fact:
      license_mac_address: "{{ host_mac.stdout.split()[1] }}"
#  - name: define license duration
#    set_fact:
#      license_duration_requested: "{{ '2 years' if 'dev' in customer.name|lower else '5 years' }}"
#  - name: define license reason
#    set_fact:
#      license_reason_for_request: "{{ 'Trial' if 'dev' in customer.name|lower else 'Production' }}"
  when:
    - inventory_hostname is search('em7')
    - inventory_hostname is not regex('mc|dc') or customer.release is not search('9.2')
  become: "{{ true if inventory_hostname is search('em7') else false }}"
  tags: vm_configuration

- block:
  - name: get proxy setting
    shell: grep -r "proxy.*=.*ht" /etc/environment /etc/profile ~/.bashrc ~/.bash_profile | cut -d '"' -f2 | uniq
    register: proxy_string
    check_mode: no
  - name: connect to sciencelogic api to get a license
    uri:
      url: https://portal.sciencelogic.com/portal/license_api
      method: POST
      body_format: json
      body:
        permanent: "{{ 'no' if 'dev' in customer.name|lower else 'yes' }}"
        authorization_key: "{{ license_authorization_key }}"
        registration_key_file_contents: "{{ license_registration_key_file_contents }}"
        appliance_type: "{{ license_appliance_type }}"
        appliance_environment: "{{ license_appliance_environment }}"
        hostname: "{{ license_hostname }}"
        mac_address: "{{ license_mac_address }}"
#        duration_requested: "{{ license_duration_requested }}"
#        reason_for_request: "{{ license_reason_for_request }}"
    register: get_cert
    until: get_cert is succeeded
    retries: 3
    delay: 5
    environment:
      http_proxy: "{{ proxy_string.stdout }}"
      https_proxy: "{{ proxy_string.stdout }}"
  when:
    - inventory_hostname is search('em7')
    - inventory_hostname is not regex('mc|dc') or customer.release is not search('9.2')
  delegate_to: "{{ groups['bastion'][0] if (groups['bastion'] | length >= 1 and bastion.address != [] and bastion.address != ['']) else 'localhost' }}"
  tags: vm_configuration

- block:
  - debug:
      msg:
        - "{{ get_cert.json }}"
  - name: create the license folder on the EM7 VM
    file:
      path: '/home/{{ ansible_user }}/license'
      state: directory
      mode: 0755
  - name: save the license on the EM7 VM under {{ hostvars[groups['em7']|first]['ansible_user'] }} home directory
    copy:
      content: "{{ get_cert.json.license }}"
      dest: '/home/{{ ansible_user }}/license/em7.lic'
  - block:
    - name: save the license on the EM7 VM under /tmp
      copy:
        content: "{{ get_cert.json.license }}"
        dest: '/tmp/em7.lic'
        group: em7admin
        owner: em7admin
    - name: create the runLicense script under /home/em7admin
      copy:
        content: '/usr/local/silo/proc/appliance_init.py -l < /tmp/em7.lic'
        dest: '/home/em7admin/runLicense'
        group: em7admin
        owner: em7admin
        mode: 0755
    become: "{{ true if inventory_hostname is search('em7') else false }}"
    when: customer.release is search('9.2')
  - block:
    - name: check if mysql is running on db01
      command: systemctl status mysql
      register: service_check
      check_mode: no
      ignore_errors: true
      delegate_to: "{{ groups['em7db']|first }}"
      when:
        - "'dr' not in group_names"
    - name: check if db vip is reachable
      command: ping {{ vip.db }} -c 1
      retries: 3
      delay: 5
      register: db_vip_reachable1
      ignore_errors: true
    - include_tasks: task_reboot_em7dbs.yml
      when: db_vip_reachable1 is failed or ('dr' not in group_names and service_check.stdout is regex('dead|failed'))
    when: inventory_hostname is search('prt')
  - name: load the EM7 license
    shell: /usr/local/silo/proc/appliance_init.py -l < /home/{{ ansible_user }}/license/em7.lic
    become: "{{ true if inventory_hostname is search('em7') else false }}"
  - block:
    - name: reboot the VM
      reboot:
        post_reboot_delay: 10
        reboot_timeout: 90
      become: "{{ true if inventory_hostname is search('em7') else false }}"
    when:
      - inventory_hostname is search('em7mc') or inventory_hostname is search('em7dc')
      - customer.release is not search('9.2')
  when:
    - get_cert.json is defined
    - inventory_hostname is search('em7')
  tags: vm_configuration
