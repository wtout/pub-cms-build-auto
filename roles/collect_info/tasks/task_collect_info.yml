---
# tasks to collect info
- block:
### Bastion ###
### prompts ###
  - pause:
      prompt: "Enter the Bastion username [ENTER]"
    register: bastion_user
    until: bastion_user.user_input != ''
    run_once: true

  - pause:
      prompt: "Enter the Bastion password [ENTER]"
      echo: no
    when:
      - groups['bastion'] | length >= 1
    register: bastion_pass
    until: bastion_pass.user_input != ''
    run_once: true

  - pause:
      prompt: "Confirm the Bastion password [ENTER]"
      echo: no
    when:
      - bastion_pass.user_input != ''
    register: bastion_pass2
    until: bastion_pass2.user_input == bastion_pass.user_input
    run_once: true

### Set Facts ###
  - block:
    - name: process Bastion credentials
      set_fact:
        new_buser: '{{ bastion_user.user_input | regex_replace("\\", "\\\\") }}'
        new_bpass: '{{ bastion_pass.user_input | regex_replace("\\", "\\\\") }}'
    - name: process Bastion password with "
      set_fact:
        new_bpass: \'{{ new_bpass }}\'
      when: bastion_pass.user_input is search('"')
    - name: process Bastion password with '
      set_fact:
        new_bpass: \"{{ new_bpass | regex_replace("'", "\'") }}\"
      when: bastion_pass.user_input is search("'")
    - name: process Bastion password with no quotes
      set_fact:
        new_bpass: "{{ new_bpass }}"
      when: bastion_pass.user_input is not regex("'|\"")

    - name: define Bastion credentials
      set_fact:
        bastion: "{{ bastion | default({}) | combine(new_item, recursive=true) }}"
      vars:
        new_item: "{'{{ item.key }}': '{{ item.value }}'}"
      with_items:
        - { key: 'username', value: '{{ new_buser }}' }
        - { key: 'password', value: '{{ new_bpass }}' }

    - name: check if Bastion login credentials are defined
      assert:
        that:
          - bastion.username is defined
          - bastion.username != ''
          - bastion.password is defined
          - bastion.password != ''
    when:
      - bastion_user.user_input is defined

### Vcenter ###
### prompts ###
  - pause:
      prompt: "Are the Vcenter login credentials the same as the Bastion's? [Yes/No]"
    when:
      - bastion.username != ''
      - bastion.password != ''
    register: answer
    run_once: true

### Set Facts ###
  - block:
    - name: define Vcenter credentials
      set_fact:
        vcenter: "{{ vcenter | default({}) | combine(new_item, recursive=true) }}"
      vars:
        new_item: "{'{{ item.key }}': '{{ item.value }}'}"
      with_items:
        - { key: 'username', value: '{{ bastion.username }}' }
        - { key: 'password', value: '{{ bastion.password }}' }
      when:
        - bastion.username != ''
        - bastion.password != ''

    - name: check if Vcenter login credentials are defined
      assert:
        that:
          - vcenter.username is defined
          - vcenter.username != ''
          - vcenter.password is defined
          - vcenter.password != ''
    when:
      - answer.user_input is defined
      - answer.user_input == '' or answer.user_input | lower == 'yes' or answer.user_input | lower == 'y'
  no_log: true
  when:
    - groups['bastion'] | length >= 1
    - bastion.address != [] and bastion.address != ['']
  tags: always

### Vcenter ###
- block:
### prompts ###
  - pause:
      prompt: "Enter the Vcenter login username [ENTER]"
    register: vcenter_user
    until: vcenter_user.user_input != ''
    run_once: true

  - pause:
      prompt: "Enter the Vcenter login password [ENTER]"
      echo: no
    when:
      - vcenter_user.user_input != ''
    register: vcenter_pass
    until: vcenter_pass.user_input != ''
    run_once: true

  - pause:
      prompt: "Confirm the Vcenter login password [ENTER]"
      echo: no
    when:
      - vcenter_pass.user_input != ''
    register: vcenter_pass2
    until: vcenter_pass2.user_input == vcenter_pass.user_input
    run_once: true

### Set Facts ###
  - block:
    - name: process vcenter credentials
      set_fact:
        new_user: '{{ vcenter_user.user_input | regex_replace("\\", "\\\\") }}'
        new_pass: '{{ vcenter_pass.user_input | regex_replace("\\", "\\\\") }}'
    - name: process vcenter password with "
      set_fact:
        new_pass: \'{{ new_pass }}\'
      when: vcenter_pass.user_input is search('"')
    - name: process vcenter password with '
      set_fact:
        new_pass: \"{{ new_pass | regex_replace("'", "\'") }}\"
      when: vcenter_pass.user_input is search("'")
    - name: process vcenter password with no quotes
      set_fact:
        new_pass: "{{ new_pass }}"
      when: vcenter_pass.user_input is not regex("'|\"")

    - name: define Vcenter credentials
      set_fact:
        vcenter: "{{ vcenter | default({}) | combine(new_item, recursive=true) }}"
      vars:
        new_item: "{'{{ item.key }}': '{{ item.value }}'}"
      with_items:
        - { key: 'username', value: '{{ new_user }}' }
        - { key: 'password', value: '{{ new_pass }}' }
    - name: check if Vcenter login credentials are defined
      assert:
        that:
          - vcenter.username is defined
          - vcenter.username != ''
          - vcenter.password is defined
          - vcenter.password != ''
    when:
      - vcenter_user.user_input is defined
  when:
    - (groups['bastion'] | length == 0 or bastion.address == [] or bastion.address == ['']) or (answer.user_input is defined and (answer.user_input | lower == 'no' or answer.user_input | lower == 'n'))
  no_log: true
  tags: always

### Write facts ###
- block:
  - name: create credentials file
    copy:
      content: '# Credentials'
      dest: "{{ VFILE }}"
      force: true

  - name: Save Bastion credentials
    lineinfile:
      path: "{{ VFILE }}"
      line: "{{ task_item.name|upper }}_{{ task_item.key|upper }}: {{ task_item.value }}"
    with_items:
        - { name: 'bastion', key: 'user', value: '{{ bastion.username }}' }
        - { name: 'bastion', key: 'pass', value: '{{ bastion.password }}' }
    loop_control:
      loop_var: task_item
    when:
      - groups['bastion'] | length >=1
      - bastion.address != [] and bastion.address != ['']

  - name: Save Vcenter credentials
    lineinfile:
      path: "{{ VFILE }}"
      line: "{{ task_item.name|upper + '_' + task_item.key|upper + ': ' + task_item.value }}"
    with_items:
        - { name: 'vcenter', key: 'user', value: '{{ vcenter.username }}' }
        - { name: 'vcenter', key: 'pass', value: '{{ vcenter.password }}' }
    loop_control:
      loop_var: task_item
  no_log: true
  check_mode: no
  tags: always
