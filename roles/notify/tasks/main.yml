---
# Tasks for notify
- name: Main notify block
  tags: ['never', 'notify']
  block:
    - name: Delete svc acct vault file
      ansible.builtin.file:
        path: "{{ file_item }}"
        state: absent
      loop:
        - "{{ SVCFILE | default('') }}"
      loop_control:
        loop_var: file_item
      when: file_item != ''
      check_mode: false
      become: true
    - name: Get playbook status from {{ LFILE }}
      ansible.builtin.shell:
        cmd: |
          set -o pipefail
          grep 'PLAY RECAP' {{ LFILE }} >/dev/null 2>&1 && sed -n '/PLAY RECAP /,/=====/{/=====/!p;}' {{ LFILE }} | \
          grep -E 'PLAY RECAP|(unreachable|failed)=[1-9]+' || echo 'No Play Recap found'
        executable: /bin/bash
      register: playbook_status
      changed_when: false
    - name: Define execution status
      ansible.builtin.set_fact:
        exec_status: "{{ exec_status | default([]) + [((line_item | regex_replace('^.*[\\|] ', '')).split(' : ') | first).strip()] }}"
      loop: "{{ playbook_status.stdout_lines | select('regex', '(unreachable=|failed=)[1-9]+|No Play') }}"
      loop_control:
        loop_var: line_item
    - name: Check execution status
      ansible.builtin.assert:
        that: exec_status | default([]) == []
      when: ansible_skip_tags is search('notify') or invoker is not search('cdra') and invoker != ''
    - name: Tasks only needed for CDRA
      when: invoker is search('cdra')
      block:
        - name: Write failed hosts list to {{ LFILE }}
          ansible.builtin.blockinfile:
            path: "{{ LFILE }}"
            marker: 'Failed Hosts Block'
            block: "{{ exec_status | join('dashdash') }}"
          when: exec_status | default([]) != []
          become: true
    - name: Tasks needed for normal use
      when: invoker == ''
      block:
        - name: Get user's identity
          ansible.builtin.command: head -4 {{ LFILE }}
          register: userid
          changed_when: false
        - name: Check if user requested to abort
          ansible.builtin.command: grep "user requested abort!" {{ LFILE }}
          register: user_abort
          changed_when: false
          ignore_errors: true
        - name: Get playbook execution time from {{ LFILE }}
          ansible.builtin.shell:
            cmd: |
              set -o pipefail && \
              grep 'PLAY RECAP' {{ LFILE }} >/dev/null 2>&1 && sed -n '/PLAY RECAP /,/===/{//!p;}' {{ LFILE }} \
              | grep -E '[0-9]{2}.[0-9]{,3} \*{3,}' >/dev/null 2>&1 && sed -n '/PLAY RECAP /,/===/{//!p;}' {{ LFILE }} | grep -E '[0-9]{2}.[0-9]{,3} \*{3,}' \
              | awk '{print $(NF - 1)}' || echo 'No Execution time found'
            executable: /bin/bash
          register: playbook_execution
          changed_when: false
        - name: Define playbook_time
          ansible.builtin.set_fact:
            playbook_time: "{{ playbook_time | default('') + ' ' + (time_item.0 + time_item.1) | regex_replace('^0(h|m)','') | regex_replace('^00.','0.') }}"
          loop: "{{ playbook_execution.stdout.split(':') | zip(['h', 'm', 's']) | list }}"
          loop_control:
            loop_var: time_item
          when: time_item.0 | float != 0
        - name: Define notif_msg
          ansible.builtin.set_fact:
            notif_msg: "{{ notif_msg | default([]) + [loop_item] | list }}"
          vars:
            fe: "{{ playbook_status.stdout | regex_search('(unreachable=|failed=)[1-9]+') }}"
          loop:
            - '========================================================='
            - ' '
            - "{{ userid.stdout.split('\n') | join('<br/>') | replace('This script was run', 'Job started') | replace('#', '') \
              | regex_replace('(Machine )([a-z]+.[a-z]+)( [0-9])', '\\1**`\\2`**\\3') | replace('<br/>An', 'An') }}"
            - "**`{{ playbook_dir.split('/')[-2] }}`** Script **`{{ SNAME }} {{ SARG | replace('dash', '-') | replace('*', '') }}`** completed \
              {{ 'successfully' if (fe == '' and playbook_status.stdout != 'No Play Recap found') else 'with **`errors`**:' }}\
              {{ ' in ' + '`' + playbook_time + '`' if playbook_execution.stdout is not search('found') else '' }}"
            - "{{ user_abort.stdout if user_abort is succeeded else '' }}"
            - "{{ playbook_status.stdout | regex_replace('[\\*]*', '') | regex_replace('[^\\.]* PLAY RECAP', '**PLAY RECAP**\n') \
              | regex_replace('((unreachable=|failed=)[1-9]+)', '**`\\1`**') | regex_replace('\n.*[\\|] ', '\n') \
              if (fe != '' or playbook_status.stdout == 'No Play Recap found') else '' }}"
            - ''
            - "The log file is **`{{ lookup('env', 'MYHOME') }}/Logs/{{ LFILE | basename }}`**"
            - ' '
            - '========================================================='
          loop_control:
            loop_var: loop_item
       # The below task implements the following curl command
       # - name: Send notification via Webex Teams
       #   ansible.builtin.shell: >
       #     export https_proxy="{{ proxy_address }}";
       #     curl -v --request POST --header "Authorization: {{ PWEBEX_BOT_TOKEN }}" --header "Content-Type: application/json" \
       #      --data '{"roomId":"{{ PWEBEX_ROOM_ID_STATUS }}","markdown":"howdybot2"}' https://api.ciscospark.com/v1/messages
        - name: Send notification via Webex Teams
          ansible.builtin.uri:
            url: "https://api.ciscospark.com/v1/messages"
            method: POST
            headers:
              Authorization: "{{ PWEBEX_BOT_TOKEN }}"
            body_format: form-urlencoded
            body:
              roomId: "{{ PWEBEX_ROOM_ID_STATUS }}"
              markdown: "{{ notif_msg | join('\n') }}"
          environment:
            http_proxy: "{{ proxy_address | default('') }}"
            https_proxy: "{{ proxy_address | default('') }}"
        - name: Check execution status
          ansible.builtin.assert:
            that: exec_status | default([]) == []
