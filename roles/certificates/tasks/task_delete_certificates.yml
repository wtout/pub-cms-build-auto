---
# Tasks to delete the puppet certificate
- block:
  - name: check if there is a cert on the VM
    stat:
      path: "/etc/puppetlabs/puppet/ssl/certs/{{customer.name_prefix}}{{vm.name}}{{inventory_hostname[-2:]}}.{{sysconfig.domain_name}}.pem"
    register: client_cert_status
  - debug:
      msg: "Found no client certificate on {{inventory_hostname}}"
    when: not client_cert_status.stat.exists

  - name: store host's connection info
    set_fact:
      host_ansible_host: "{{ansible_host}}"
      host_ansible_user: "{{ansible_user}}"
      host_ansible_ssh_pass: "{{ansible_ssh_pass}}"
      host_ansible_become_pass: "{{ansible_ssh_pass}}"
  - name: overwrite host's connection info
    set_fact:
      ansible_host: "{{hostvars[groups['puppet']|first]['ansible_host']}}"
      ansible_user: "{{hostvars[groups['puppet']|first]['ansible_user']}}"
      ansible_ssh_pass: "{{hostvars[groups['puppet']|first]['ansible_ssh_pass']}}"
      ansible_become_pass: "{{hostvars[groups['puppet']|first]['ansible_ssh_pass']}}"
  - name: check if there is a cert on the puppet server
    shell: puppet cert list {{customer.name_prefix}}{{vm.name}}{{inventory_hostname[-2:]}}.{{sysconfig.domain_name}} | cut -d '(' -f2
    args:
      chdir: '/usr/local/bin'
    check_mode: no
    ignore_errors: true
    register: client_cert_on_server
  - name: reset host's connection info
    set_fact:
      ansible_host: "{{host_ansible_host}}"
      ansible_user: "{{host_ansible_user}}"
      ansible_ssh_pass: "{{host_ansible_ssh_pass}}"
      ansible_become_pass: "{{host_ansible_ssh_pass}}"

  - debug:
      msg: "Found no client certificate for {{inventory_hostname}} on puppet server"
    when:
      - client_cert_on_server.stderr != ''
      - "'Could not find a certificate for' in client_cert_on_server.stderr"

  - name: check if client cert fingerprint matches cert on server
    shell: openssl x509 -text -noout -{{client_cert_on_server.stdout.split(' ')[0] | replace(')', '')}} -fingerprint -in certs/{{customer.name_prefix}}{{vm.name}}{{inventory_hostname[-2:]}}.{{sysconfig.domain_name}}.pem | tail -1 | cut -d '=' -f2 | grep {{client_cert_on_server.stdout.split(' ')[1]}}
    args:
      chdir: '/etc/puppetlabs/puppet/ssl'
    register: client_cert_match
    check_mode: no
    when:
      - client_cert_status.stat.exists
      - client_cert_on_server.stdout != ''
      - client_cert_on_server.stderr == ''

  - name: define delete client cert on VM
    set_fact:
      delete_client_cert_on_vm: true
    when:
      - client_cert_status.stat.exists
      - client_cert_on_server.stderr != '' or client_cert_match is failed

  - name: define delete client cert on puppet server
    set_fact:
      delete_client_cert_on_server: true
    when:
      - client_cert_on_server.stdout != ''
      - client_cert_on_server.stderr == ''
      - not client_cert_status.stat.exists or delete_client_cert_on_vm|default(false)

  - block:
    - name: delete puppetlabs directory on VM
      file:
        path: '/etc/puppetlabs'
        state: absent
    - name: uninstall puppet agent on VM
      yum:
        name: puppet-agent
        state: absent
#    - name: find all client cert files on the VM
#      find:
#        paths: '/etc/puppetlabs/puppet/ssl'
#        patterns: "{{customer.name_prefix}}{{vm.name}}{{inventory_hostname[-2:]}}.{{sysconfig.domain_name}}.pem"
#        recurse: yes
#      register: client_cert
#    - name: delete client cert if not active on puppet server
#      file:
#        path: "{{cert_item.path}}"
#        state: absent
#      loop: "{{client_cert.files}}"
#      loop_control:
#        loop_var: cert_item
    become: "{{true if 'em7' in group_names else false}}"
    when: delete_client_cert_on_vm | default(false) | bool

  - block:
    - name: store host's connection info
      set_fact:
        host_ansible_host: "{{ansible_host}}"
        host_ansible_user: "{{ansible_user}}"
        host_ansible_ssh_pass: "{{ansible_ssh_pass}}"
        host_ansible_become_pass: "{{ansible_ssh_pass}}"
    - name: overwrite host's connection info
      set_fact:
        ansible_host: "{{hostvars[groups['puppet']|first]['ansible_host']}}"
        ansible_user: "{{hostvars[groups['puppet']|first]['ansible_user']}}"
        ansible_ssh_pass: "{{hostvars[groups['puppet']|first]['ansible_ssh_pass']}}"
        ansible_become_pass: "{{hostvars[groups['puppet']|first]['ansible_ssh_pass']}}"
    - name: check if cleancert.sh exists
      stat:
        path: '/opt/puppet/qs_scripts/cleancert.sh'
      register: script_stat
      run_once: true
    - assert:
        that: script_stat.stat.exists
        fail_msg: 'Script to delete the certificates does not exist. Aborting!'
      run_once: true
    - name: delete the VM certificate
      shell: puppet cert clean {{customer.name_prefix}}{{vm.name}}{{inventory_hostname[-2:]}}.{{sysconfig.domain_name}}
      args:
        chdir: '/usr/local/bin'
    - name: reset host's connection info
      set_fact:
        ansible_host: "{{host_ansible_host}}"
        ansible_user: "{{host_ansible_user}}"
        ansible_ssh_pass: "{{host_ansible_ssh_pass}}"
        ansible_become_pass: "{{host_ansible_ssh_pass}}"
    when: delete_client_cert_on_server | default(false) | bool
  tags: certificates
