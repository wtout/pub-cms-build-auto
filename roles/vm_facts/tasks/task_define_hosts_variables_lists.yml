---
# tasks to get VMs info
- block:
  - name: define hosts info
    set_fact:
      ipaddress1: "{{ipvar1 if ipvar1 != '' else octetvar1}}"
      ipaddress2: "{{ipvar2 if ipvar2 != '' else octetvar2}}"
      vmname: "{{namevar}}"
      vmcpu: "{{cpuvar}}"
      vmmem: "{{memvar}}"
      appliance: "[{{ipvar1 if ipvar1 != '' else octetvar1}}/{{typevar}} {{ipvar1 if ipvar1 != '' else octetvar1}}\"/CUG]"
    vars:
      index: "{{member_item[-2:]}}"
      ipvar1: "{{hostvars[member_item]['netconfig']['ippool1'][index|int - 1] if hostvars[member_item]['netconfig']['ippool1'] is defined else ''}}"
      ipvar2: "{{hostvars[member_item]['netconfig']['ippool2'][index|int - 1] if hostvars[member_item]['netconfig']['ippool2'] is defined else ''}}"
      octetvar1: "{{customer.octets + '.' + hostvars[member_item]['netconfig']['octetpool1'][index|int - 1]|string if (hostvars[member_item]['netconfig']['octetpool1'] is defined and hostvars[member_item]['netconfig']['octetpool1'] != [] and index|int <= hostvars[member_item]['netconfig']['octetpool1']|length) else ''}}"
      octetvar2: "{{customer.octets + '.' + hostvars[member_item]['netconfig']['octetpool2'][index|int - 1]|string if (hostvars[member_item]['netconfig']['octetpool2'] is defined and hostvars[member_item]['netconfig']['octetpool2'] != [] and index|int <= hostvars[member_item]['netconfig']['octetpool2']|length) else ''}}"
      namevar: "{{customer.name_prefix}}{{hostvars[member_item]['vm']['name']}}{{member_item[-2:]}}"
      cpuvar: "{{hostvars[member_item]['vm']['cpu']}}"
      memvar: "{{hostvars[member_item]['vm']['memory']}}"
      typevar: "{{'db/\"Database:' if 'em7db' in hostvars[member_item]['group_names'] else 'ap/\"Admin Portal:' if 'em7prt' in hostvars[member_item]['group_names'] else 'mc/\"Message Collector:' if 'em7mc' in hostvars[member_item]['group_names'] else 'dc/\"Data Collector:'}}"
    loop: "{{groups[vm_group]}}"
    loop_control:
      loop_var: member_item
    register: info

  - name: define appliances list
    set_fact:
      appliances_list: "{{appliances_list | default([]) + myvar if (appliances_list is defined and appliances_list != '') else myvar}}"
    vars:
      myvar: "{{info.results | selectattr('member_item', 'equalto', info_item) | map(attribute='ansible_facts.appliance') | list}}"
    loop: "{{(groups['em7db'] if groups['em7db'] is defined else []) + (groups['em7prt'] if groups['em7prt'] is defined else []) + (groups['em7mc'] if groups['em7mc'] is defined else []) + (groups['em7dc'] if groups['em7dc'] is defined else [])}}"
    loop_control:
      loop_var: info_item
    when: info.results | selectattr('member_item', 'equalto', info_item) | map(attribute='member_item') | list | string is search(info_item)

  - name: define linuxjs lists
    set_fact:
      linuxjs_ip1_list: "{{linuxjs_ip1_list | default([]) + ipvar1 if (linuxjs_ip1_list is defined and linuxjs_ip1_list != '') else ipvar1}}"
      linuxjs_hst_list: "{{linuxjs_hst_list | default([]) + hstvar if (linuxjs_hst_list is defined and linuxjs_hst_list != '') else hstvar}}"
    vars:
      ipvar1: "{{info.results | selectattr('member_item', 'equalto', info_item) | map(attribute='ansible_facts.ipaddress1') | list}}"
      hstvar: "{{info.results | selectattr('member_item', 'equalto', info_item) | map(attribute='ansible_facts.vmname') | list}}"
    loop: "{{groups['linuxjs']}}"
    loop_control:
      loop_var: info_item
    when:
      - groups['linuxjs'] is defined
      - info.results | selectattr('member_item', 'equalto', info_item) | map(attribute='member_item') | list | string is search(info_item)

  - name: define relay lists
    set_fact:
      relay_ip1_list: "{{relay_ip1_list | default([]) + ipvar1 if (relay_ip1_list is defined and relay_ip1_list != '') else ipvar1}}"
      relay_hst_list: "{{relay_hst_list | default([]) + hstvar if (relay_hst_list is defined and relay_hst_list != '') else hstvar}}"
    vars:
      ipvar1: "{{info.results | selectattr('member_item', 'equalto', info_item) | map(attribute='ansible_facts.ipaddress1') | list}}"
      hstvar: "{{info.results | selectattr('member_item', 'equalto', info_item) | map(attribute='ansible_facts.vmname') | list}}"
    loop: "{{groups['relay']}}"
    loop_control:
      loop_var: info_item
    when:
      - groups['relay'] is defined
      - info.results | selectattr('member_item', 'equalto', info_item) | map(attribute='member_item') | list | string is search(info_item)

  - name: define splunkdpl lists
    set_fact:
      splunkdpl_ip1_list: "{{splunkdpl_ip1_list | default([]) + ipvar1 if (splunkdpl_ip1_list is defined and splunkdpl_ip1_list != '') else ipvar1}}"
      splunkdpl_hst_list: "{{splunkdpl_hst_list | default([]) + hstvar if (splunkdpl_hst_list is defined and splunkdpl_hst_list != '') else hstvar}}"
    vars:
      ipvar1: "{{info.results | selectattr('member_item', 'equalto', info_item) | map(attribute='ansible_facts.ipaddress1') | list}}"
      hstvar: "{{info.results | selectattr('member_item', 'equalto', info_item) | map(attribute='ansible_facts.vmname') | list}}"
    loop: "{{groups['splunkdpl']}}"
    loop_control:
      loop_var: info_item
    when:
      - groups['splunkdpl'] is defined
      - info.results | selectattr('member_item', 'equalto', info_item) | map(attribute='member_item') | list | string is search(info_item)

  - name: define splunkind lists
    set_fact:
      splunkind_ip1_list: "{{splunkind_ip1_list | default([]) + ipvar1 if (splunkind_ip1_list is defined and splunkind_ip1_list != '') else ipvar1}}"
      splunkind_hst_list: "{{splunkind_hst_list | default([]) + hstvar if (splunkind_hst_list is defined and splunkind_hst_list != '') else hstvar}}"
    vars:
      ipvar1: "{{info.results | selectattr('member_item', 'equalto', info_item) | map(attribute='ansible_facts.ipaddress1') | list}}"
      hstvar: "{{info.results | selectattr('member_item', 'equalto', info_item) | map(attribute='ansible_facts.vmname') | list}}"
    loop: "{{groups['splunkind']}}"
    loop_control:
      loop_var: info_item
    when:
      - groups['splunkind'] is defined
      - info.results | selectattr('member_item', 'equalto', info_item) | map(attribute='member_item') | list | string is search(info_item)

  - name: define splunkmas lists
    set_fact:
      splunkmas_ip1_list: "{{splunkmas_ip1_list | default([]) + ipvar1 if (splunkmas_ip1_list is defined and splunkmas_ip1_list != '') else ipvar1}}"
      splunkmas_hst_list: "{{splunkmas_hst_list | default([]) + hstvar if (splunkmas_hst_list is defined and splunkmas_hst_list != '') else hstvar}}"
    vars:
      ipvar1: "{{info.results | selectattr('member_item', 'equalto', info_item) | map(attribute='ansible_facts.ipaddress1') | list}}"
      hstvar: "{{info.results | selectattr('member_item', 'equalto', info_item) | map(attribute='ansible_facts.vmname') | list}}"
    loop: "{{groups['splunkmas']}}"
    loop_control:
      loop_var: info_item
    when:
      - groups['splunkmas'] is defined
      - info.results | selectattr('member_item', 'equalto', info_item) | map(attribute='member_item') | list | string is search(info_item)

  - name: define splunksrc lists
    set_fact:
      splunksrc_ip1_list: "{{splunksrc_ip1_list | default([]) + ipvar1 if (splunksrc_ip1_list is defined and splunksrc_ip1_list != '') else ipvar1}}"
      splunksrc_hst_list: "{{splunksrc_hst_list | default([]) + hstvar if (splunksrc_hst_list is defined and splunkmas_hst_list != '') else hstvar}}"
    vars:
      ipvar1: "{{info.results | selectattr('member_item', 'equalto', info_item) | map(attribute='ansible_facts.ipaddress1') | list}}"
      hstvar: "{{info.results | selectattr('member_item', 'equalto', info_item) | map(attribute='ansible_facts.vmname') | list}}"
    loop: "{{groups['splunksrc']}}"
    loop_control:
      loop_var: info_item
    when:
      - groups['splunksrc'] is defined
      - info.results | selectattr('member_item', 'equalto', info_item) | map(attribute='member_item') | list | string is search(info_item)

  - name: define em7prt lists
    set_fact:
      prt_ip1_list: "{{prt_ip1_list | default([]) + ipvar1 if (prt_ip1_list is defined and prt_ip1_list != '') else ipvar1}}"
      prt_hst_list: "{{prt_hst_list | default([]) + hstvar if (prt_hst_list is defined and prt_hst_list != '') else hstvar}}"
      prt_cpu_list: "{{prt_cpu_list | default([]) + cpuvar if (prt_cpu_list is defined and prt_cpu_list != '') else cpuvar}}"
      prt_mem_list: "{{prt_mem_list | default([]) + cpuvar if (prt_mem_list is defined and prt_mem_list != '') else memvar}}"
    vars:
      ipvar1: "{{info.results | selectattr('member_item', 'equalto', info_item) | map(attribute='ansible_facts.ipaddress1') | list}}"
      hstvar: "{{info.results | selectattr('member_item', 'equalto', info_item) | map(attribute='ansible_facts.vmname') | list}}"
      cpuvar: "{{info.results | selectattr('member_item', 'equalto', info_item) | map(attribute='ansible_facts.vmcpu') | list}}"
      memvar: "{{info.results | selectattr('member_item', 'equalto', info_item) | map(attribute='ansible_facts.vmmem') | list}}"
    loop: "{{groups['em7prt']}}"
    loop_control:
      loop_var: info_item
    when:
      - groups['em7prt'] is defined
      - info.results | selectattr('member_item', 'equalto', info_item) | map(attribute='member_item') | list | string is search(info_item)

  - name: define em7db lists
    set_fact:
      db_ip1_list: "{{db_ip1_list | default([]) + ipvar1 if (db_ip1_list is defined and db_ip1_list != '') else ipvar1}}"
      db_ip2_list: "{{db_ip2_list | default([]) + ipvar2 if (db_ip2_list is defined and db_ip2_list != '') else ipvar2}}"
      db_hst_list: "{{db_hst_list | default([]) + hstvar if (db_hst_list is defined and db_hst_list != '') else hstvar}}"
    vars:
      ipvar1: "{{info.results | selectattr('member_item', 'equalto', info_item) | map(attribute='ansible_facts.ipaddress1') | list}}"
      ipvar2: "{{info.results | selectattr('member_item', 'equalto', info_item) | map(attribute='ansible_facts.ipaddress2') | list}}"
      hstvar: "{{info.results | selectattr('member_item', 'equalto', info_item) | map(attribute='ansible_facts.vmname') | list}}"
    loop: "{{groups['em7db']}}"
    loop_control:
      loop_var: info_item
    when:
      - groups['em7db'] is defined
      - info.results | selectattr('member_item', 'equalto', info_item) | map(attribute='member_item') | list | string is search(info_item)

  - name: define em7 dc lists
    set_fact:
      dc_ip1_list: "{{dc_ip1_list | default([]) + ipvar1 if (dc_ip1_list is defined and dc_ip1_list != '') else ipvar1}}"
      half_dc_ip1_list: "{{half_dc_ip1_list | default([]) + halfvar1 if (half_dc_ip1_list is defined and half_dc_ip1_list != '') else halfvar1}}"
      dc_hst_list: "{{dc_hst_list | default([]) + hstvar if (dc_hst_list is defined and dc_hst_list != '') else hstvar}}"
    vars:
      ipvar1: "{{info.results | selectattr('member_item', 'equalto', info_item.0) | map(attribute='ansible_facts.ipaddress1') | list}}"
      halfvar1: "{{info.results | selectattr('member_item', 'equalto', info_item.0) | map(attribute='ansible_facts.ipaddress1') | list if info_item.1|int <= groups['em7dc']|length/2 - 1|int else []}}"
      hstvar: "{{info.results | selectattr('member_item', 'equalto', info_item.0) | map(attribute='ansible_facts.vmname') | list}}"
    loop: "{{groups['em7dc'] | zip(range(0, (groups['em7dc']|length)|int)) | list}}"
    loop_control:
      loop_var: info_item
    when:
      - groups['em7dc'] is defined
      - info.results | selectattr('member_item', 'equalto', info_item.0) | map(attribute='member_item') | list | string is search(info_item.0)

  - name: define em7 mc lists
    set_fact:
      mc_ip1_list: "{{mc_ip1_list | default([]) + ipvar1 if (mc_ip1_list is defined and mc_ip1_list != '') else ipvar1}}"
      mc_hst_list: "{{mc_hst_list | default([]) + hstvar if (mc_hst_list is defined and mc_hst_list != '') else hstvar}}"
    vars:
      ipvar1: "{{info.results | selectattr('member_item', 'equalto', info_item) | map(attribute='ansible_facts.ipaddress1') | list}}"
      hstvar: "{{info.results | selectattr('member_item', 'equalto', info_item) | map(attribute='ansible_facts.vmname') | list}}"
    loop: "{{groups['em7mc']}}"
    loop_control:
      loop_var: info_item
    when:
      - groups['em7mc'] is defined
      - info.results | selectattr('member_item', 'equalto', info_item) | map(attribute='member_item') | list | string is search(info_item)
  delegate_to: "{{groups['stack'] | first}}"
  run_once: true
  tags: always
